// Code generated by hertz generator.

package conversation

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	"orbia_api/biz/model/common"
	conversationModel "orbia_api/biz/model/conversation"
	"orbia_api/biz/mw"
	conversationService "orbia_api/biz/service/conversation"
)

var (
	convSvc conversationService.ConversationService
)

// InitConversationService 初始化会话服务
func InitConversationService() {
	convRepo := mysql.NewConversationRepository(mysql.DB)
	userRepo := mysql.NewUserRepository(mysql.DB)
	convSvc = conversationService.NewConversationService(convRepo, userRepo)
}

// SendMessage 发送消息
// @router /conversation/send_message [POST]
func SendMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversationModel.SendMessageReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("SendMessage bind error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.SendMessageResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("SendMessage: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &conversationModel.SendMessageResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层发送消息
	message, err := convSvc.SendMessage(userID, req.ConversationID, req.MessageType, req.Content,
		req.FileName, req.FileSize, req.FileType)
	if err != nil {
		hlog.Errorf("SendMessage service error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.SendMessageResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	// 构建响应
	resp := &conversationModel.SendMessageResp{
		Message: &conversationModel.Message{
			MessageID:       message.MessageID,
			ConversationID:  message.ConversationID,
			SenderID:        message.SenderID,
			SenderNickname:  message.SenderNickname,
			SenderAvatarURL: message.SenderAvatarURL,
			MessageType:     message.MessageType,
			Content:         message.Content,
			FileName:        message.FileName,
			FileSize:        message.FileSize,
			FileType:        message.FileType,
			Status:          message.Status,
			CreatedAt:       message.CreatedAt,
		},
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetMessages 获取消息列表
// @router /conversation/get_messages [POST]
func GetMessages(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversationModel.GetMessagesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetMessages bind error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetMessagesResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetMessages: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &conversationModel.GetMessagesResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 设置默认limit（thrift已有默认值20）
	limit := int(req.Limit)
	if limit <= 0 {
		limit = 20
	}

	// 调用服务层获取消息列表
	messages, hasMore, err := convSvc.GetMessages(userID, req.ConversationID, req.BeforeTimestamp, limit)
	if err != nil {
		hlog.Errorf("GetMessages service error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetMessagesResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	// 构建响应
	messageList := make([]*conversationModel.Message, 0, len(messages))
	for _, msg := range messages {
		messageList = append(messageList, &conversationModel.Message{
			MessageID:       msg.MessageID,
			ConversationID:  msg.ConversationID,
			SenderID:        msg.SenderID,
			SenderNickname:  msg.SenderNickname,
			SenderAvatarURL: msg.SenderAvatarURL,
			MessageType:     msg.MessageType,
			Content:         msg.Content,
			FileName:        msg.FileName,
			FileSize:        msg.FileSize,
			FileType:        msg.FileType,
			Status:          msg.Status,
			CreatedAt:       msg.CreatedAt,
		})
	}

	resp := &conversationModel.GetMessagesResp{
		Messages: messageList,
		HasMore:  hasMore,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetConversation 获取会话详情
// @router /conversation/get_conversation [POST]
func GetConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversationModel.GetConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetConversation bind error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetConversationResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetConversation: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &conversationModel.GetConversationResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层获取会话详情
	conversation, err := convSvc.GetConversation(userID, req.ConversationID)
	if err != nil {
		hlog.Errorf("GetConversation service error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetConversationResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	// 构建会话成员列表
	members := make([]*conversationModel.ConversationMember, 0, len(conversation.Members))
	for _, m := range conversation.Members {
		members = append(members, &conversationModel.ConversationMember{
			UserID:    m.UserID,
			Nickname:  m.Nickname,
			AvatarURL: m.AvatarURL,
			Role:      m.Role,
			JoinedAt:  m.JoinedAt.Format("2006-01-02 15:04:05"),
		})
	}

	// 构建响应
	var lastMessageAt *int64
	if conversation.LastMessageAt != nil {
		ts := conversation.LastMessageAt.UnixMilli()
		lastMessageAt = &ts
	}

	resp := &conversationModel.GetConversationResp{
		Conversation: &conversationModel.ConversationInfo{
			ConversationID:   conversation.ConversationID,
			Title:            conversation.Title,
			Type:             conversation.Type,
			RelatedOrderType: conversation.RelatedOrderType,
			RelatedOrderID:   conversation.RelatedOrderID,
			Status:           conversation.Status,
			LastMessageAt:    lastMessageAt,
			Members:          members,
			UnreadCount:      int32(conversation.UnreadCount),
			CreatedAt:        conversation.CreatedAt.Format("2006-01-02 15:04:05"),
		},
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetConversations 获取会话列表
// @router /conversation/get_conversations [POST]
func GetConversations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversationModel.GetConversationsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetConversations bind error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetConversationsResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetConversations: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &conversationModel.GetConversationsResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 设置默认分页参数（thrift已有默认值）
	page := int(req.Page)
	pageSize := int(req.PageSize)
	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 20
	}

	// 调用服务层获取会话列表
	conversations, total, err := convSvc.GetConversations(userID, req.Type, page, pageSize)
	if err != nil {
		hlog.Errorf("GetConversations service error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.GetConversationsResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	// 构建响应
	conversationList := make([]*conversationModel.ConversationItem, 0, len(conversations))
	for _, conv := range conversations {
		// 构建会话成员列表
		members := make([]*conversationModel.ConversationMember, 0, len(conv.Members))
		for _, m := range conv.Members {
			members = append(members, &conversationModel.ConversationMember{
				UserID:    m.UserID,
				Nickname:  m.Nickname,
				AvatarURL: m.AvatarURL,
				Role:      m.Role,
				JoinedAt:  m.JoinedAt.Format("2006-01-02 15:04:05"),
			})
		}

		// 构建最后一条消息
		var lastMessage *conversationModel.Message
		if conv.LastMessage != nil {
			lastMessage = &conversationModel.Message{
				MessageID:       conv.LastMessage.MessageID,
				ConversationID:  conv.LastMessage.ConversationID,
				SenderID:        conv.LastMessage.SenderID,
				SenderNickname:  conv.LastMessage.SenderNickname,
				SenderAvatarURL: conv.LastMessage.SenderAvatarURL,
				MessageType:     conv.LastMessage.MessageType,
				Content:         conv.LastMessage.Content,
				FileName:        conv.LastMessage.FileName,
				FileSize:        conv.LastMessage.FileSize,
				FileType:        conv.LastMessage.FileType,
				Status:          conv.LastMessage.Status,
				CreatedAt:       conv.LastMessage.CreatedAt,
			}
		}

		var lastMessageAt *int64
		if conv.LastMessageAt != nil {
			ts := conv.LastMessageAt.UnixMilli()
			lastMessageAt = &ts
		}

		conversationList = append(conversationList, &conversationModel.ConversationItem{
			ConversationID:   conv.ConversationID,
			Title:            conv.Title,
			Type:             conv.Type,
			RelatedOrderType: conv.RelatedOrderType,
			RelatedOrderID:   conv.RelatedOrderID,
			Status:           conv.Status,
			LastMessage:      lastMessage,
			UnreadCount:      int32(conv.UnreadCount),
			Members:          members,
			CreatedAt:        conv.CreatedAt.Format("2006-01-02 15:04:05"),
			LastMessageAt:    lastMessageAt,
		})
	}

	// 计算总页数
	totalPages := int32((total + int64(pageSize) - 1) / int64(pageSize))

	resp := &conversationModel.GetConversationsResp{
		Conversations: conversationList,
		PageInfo: &common.PageResp{
			Page:       int32(page),
			PageSize:   int32(pageSize),
			Total:      total,
			TotalPages: totalPages,
		},
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// MarkMessagesRead 标记消息已读
// @router /conversation/mark_read [POST]
func MarkMessagesRead(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversationModel.MarkMessagesReadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("MarkMessagesRead bind error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.MarkMessagesReadResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("MarkMessagesRead: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &conversationModel.MarkMessagesReadResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层标记消息已读
	err = convSvc.MarkMessagesRead(userID, req.ConversationID)
	if err != nil {
		hlog.Errorf("MarkMessagesRead service error: %v", err)
		c.JSON(http.StatusBadRequest, &conversationModel.MarkMessagesReadResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &conversationModel.MarkMessagesReadResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}
