// Code generated by hertz generator.

package kol

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	"orbia_api/biz/model/common"
	kolModel "orbia_api/biz/model/kol"
	"orbia_api/biz/mw"
	kolService "orbia_api/biz/service/kol"
)

var (
	kolSvc kolService.KolService
)

// InitKolService 初始化KOL服务
func InitKolService() {
	kolRepo := mysql.NewKolRepository(mysql.DB)
	userRepo := mysql.NewUserRepository(mysql.DB)
	kolSvc = kolService.NewKolService(kolRepo, userRepo)
}

// ApplyKol 申请成为KOL
// @router /api/v1/kol/apply [POST]
func ApplyKol(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.ApplyKolReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("ApplyKol bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.ApplyKolResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("ApplyKol: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.ApplyKolResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层申请KOL
	kolID, err := kolSvc.ApplyKol(userID, req.DisplayName, req.Description, req.Country,
		req.AvatarURL, req.TiktokURL, req.YoutubeURL, req.XURL, req.DiscordURL,
		req.LanguageCodes, req.LanguageNames, req.Tags)
	if err != nil {
		hlog.Errorf("ApplyKol service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.ApplyKolResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.ApplyKolResp{
		KolID: &kolID,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetKolInfo 获取KOL信息
// @router /api/v1/kol/info [POST]
func GetKolInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.GetKolInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetKolInfo bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.GetKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetKolInfo: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.GetKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 如果没有指定kol_id，则查询当前用户的KOL信息
	var kolID *int64
	var userIDPtr *int64
	if req.KolID != nil && *req.KolID > 0 {
		kolID = req.KolID
	} else {
		userIDPtr = &userID
	}

	// 调用服务层获取KOL信息
	kol, languages, tags, stats, err := kolSvc.GetKolInfo(kolID, userIDPtr)
	if err != nil {
		hlog.Errorf("GetKolInfo service error: %v", err)
		c.JSON(http.StatusNotFound, &kolModel.GetKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    404,
				Message: err.Error(),
			},
		})
		return
	}

	// 转换为响应格式
	// 辅助函数：将指针字符串转换为字符串
	ptrToStr := func(s *string) string {
		if s != nil {
			return *s
		}
		return ""
	}

	kolInfo := &kolModel.KolInfo{
		ID:           kol.ID,
		UserID:       kol.UserID,
		AvatarURL:    ptrToStr(kol.AvatarURL),
		DisplayName:  ptrToStr(kol.DisplayName),
		Description:  ptrToStr(kol.Description),
		Country:      ptrToStr(kol.Country),
		TiktokURL:    ptrToStr(kol.TiktokURL),
		YoutubeURL:   ptrToStr(kol.YoutubeURL),
		XURL:         ptrToStr(kol.XURL),
		DiscordURL:   ptrToStr(kol.DiscordURL),
		Status:       kol.Status,
		RejectReason: ptrToStr(kol.RejectReason),
		CreatedAt:    kol.CreatedAt.Format("2006-01-02 15:04:05"),
		UpdatedAt:    kol.UpdatedAt.Format("2006-01-02 15:04:05"),
	}

	if kol.ApprovedAt != nil {
		approvedAt := kol.ApprovedAt.Format("2006-01-02 15:04:05")
		kolInfo.ApprovedAt = approvedAt
	}

	// 添加语言列表
	// 确保即使没有数据也返回空数组而不是 null
	kolInfo.Languages = make([]*kolModel.KolLanguage, 0, len(languages))
	for _, lang := range languages {
		kolInfo.Languages = append(kolInfo.Languages, &kolModel.KolLanguage{
			LanguageCode: lang.LanguageCode,
			LanguageName: lang.LanguageName,
		})
	}

	// 添加标签列表
	// 确保即使没有数据也返回空数组而不是 null
	kolInfo.Tags = make([]*kolModel.KolTag, 0, len(tags))
	for _, tag := range tags {
		kolInfo.Tags = append(kolInfo.Tags, &kolModel.KolTag{
			Tag: tag.Tag,
		})
	}

	// 添加统计数据
	// 确保即使没有统计数据也返回默认值而不是 null
	if stats != nil {
		kolInfo.Stats = &kolModel.KolStats{
			TotalFollowers:     stats.TotalFollowers,
			TiktokFollowers:    stats.TiktokFollowers,
			YoutubeSubscribers: stats.YoutubeSubscribers,
			XFollowers:         stats.XFollowers,
			DiscordMembers:     stats.DiscordMembers,
			TiktokAvgViews:     stats.TiktokAvgViews,
			EngagementRate:     stats.EngagementRate,
		}
	} else {
		// 返回默认的统计数据
		kolInfo.Stats = &kolModel.KolStats{
			TotalFollowers:     0,
			TiktokFollowers:    0,
			YoutubeSubscribers: 0,
			XFollowers:         0,
			DiscordMembers:     0,
			TiktokAvgViews:     0,
			EngagementRate:     0,
		}
	}

	resp := &kolModel.GetKolInfoResp{
		KolInfo: kolInfo,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolInfo 更新KOL信息
// @router /api/v1/kol/update [POST]
func UpdateKolInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.UpdateKolInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("UpdateKolInfo bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("UpdateKolInfo: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.UpdateKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层更新KOL信息
	err = kolSvc.UpdateKolInfo(userID, req.DisplayName, req.Description, req.Country,
		req.AvatarURL, req.TiktokURL, req.YoutubeURL, req.XURL, req.DiscordURL,
		&req.LanguageCodes, &req.LanguageNames, &req.Tags)
	if err != nil {
		hlog.Errorf("UpdateKolInfo service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolInfoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.UpdateKolInfoResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// ReviewKol 审核KOL（管理员使用）
// @router /api/v1/kol/review [POST]
func ReviewKol(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.ReviewKolReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("ReviewKol bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.ReviewKolResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID（管理员验证可以在中间件中处理）
	_, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("ReviewKol: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.ReviewKolResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// TODO: 添加管理员权限验证

	// 调用服务层审核KOL
	rejectReason := ""
	if req.RejectReason != nil {
		rejectReason = *req.RejectReason
	}
	err = kolSvc.ReviewKol(req.KolID, req.Status, rejectReason)
	if err != nil {
		hlog.Errorf("ReviewKol service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.ReviewKolResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.ReviewKolResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetKolList 获取KOL列表
// @router /api/v1/kol/list [POST]
func GetKolList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.GetKolListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetKolList bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.GetKolListResp{
			KolList: make([]*kolModel.KolInfo, 0),
			Total:   0,
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 获取KOL列表不强制要求认证，但如果有JWT则可以使用
	// 这里不检查用户是否已登录，允许游客访问

	page := 1
	pageSize := 10
	if req.Page != nil && *req.Page > 0 {
		page = int(*req.Page)
	}
	if req.PageSize != nil && *req.PageSize > 0 {
		pageSize = int(*req.PageSize)
	}

	// 调用服务层获取KOL列表
	kols, total, err := kolSvc.GetKolList(req.Status, req.Country, req.Tag, page, pageSize)
	if err != nil {
		hlog.Errorf("GetKolList service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.GetKolListResp{
			KolList: make([]*kolModel.KolInfo, 0),
			Total:   0,
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	// 辅助函数：将指针字符串转换为字符串
	ptrToStr := func(s *string) string {
		if s != nil {
			return *s
		}
		return ""
	}

	// 转换为响应格式
	// 确保即使没有数据也返回空数组而不是 null
	kolList := make([]*kolModel.KolInfo, 0, len(kols))
	for _, kol := range kols {
		kolInfo := &kolModel.KolInfo{
			ID:          kol.ID,
			UserID:      kol.UserID,
			AvatarURL:   ptrToStr(kol.AvatarURL),
			DisplayName: ptrToStr(kol.DisplayName),
			Description: ptrToStr(kol.Description),
			Country:     ptrToStr(kol.Country),
			TiktokURL:   ptrToStr(kol.TiktokURL),
			YoutubeURL:  ptrToStr(kol.YoutubeURL),
			XURL:        ptrToStr(kol.XURL),
			DiscordURL:  ptrToStr(kol.DiscordURL),
			Status:      kol.Status,
			CreatedAt:   kol.CreatedAt.Format("2006-01-02 15:04:05"),
			UpdatedAt:   kol.UpdatedAt.Format("2006-01-02 15:04:05"),
		}
		if kol.ApprovedAt != nil {
			approvedAt := kol.ApprovedAt.Format("2006-01-02 15:04:05")
			kolInfo.ApprovedAt = approvedAt
		}
		kolList = append(kolList, kolInfo)
	}

	resp := &kolModel.GetKolListResp{
		KolList: kolList,
		Total:   total,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolStats 更新KOL统计数据
// @router /api/v1/kol/stats/update [POST]
func UpdateKolStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.UpdateKolStatsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("UpdateKolStats bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolStatsResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("UpdateKolStats: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.UpdateKolStatsResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层更新KOL统计数据
	err = kolSvc.UpdateKolStats(userID, req.TotalFollowers, req.TiktokFollowers,
		req.YoutubeSubscribers, req.XFollowers, req.DiscordMembers, req.TiktokAvgViews, req.EngagementRate)
	if err != nil {
		hlog.Errorf("UpdateKolStats service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolStatsResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.UpdateKolStatsResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// SaveKolPlan 创建或更新KOL报价Plan
// @router /api/v1/kol/plan/save [POST]
func SaveKolPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.SaveKolPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("SaveKolPlan bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.SaveKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("SaveKolPlan: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.SaveKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层保存Plan
	planID, err := kolSvc.SaveKolPlan(userID, req.ID, req.Title, req.Description, req.Price, req.PlanType)
	if err != nil {
		hlog.Errorf("SaveKolPlan service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.SaveKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.SaveKolPlanResp{
		PlanID: &planID,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteKolPlan 删除KOL报价Plan
// @router /api/v1/kol/plan/delete [POST]
func DeleteKolPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.DeleteKolPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("DeleteKolPlan bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.DeleteKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("DeleteKolPlan: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.DeleteKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层删除Plan
	err = kolSvc.DeleteKolPlan(userID, req.PlanID)
	if err != nil {
		hlog.Errorf("DeleteKolPlan service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.DeleteKolPlanResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.DeleteKolPlanResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetKolPlans 获取KOL报价Plans列表
// @router /api/v1/kol/plans [POST]
func GetKolPlans(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.GetKolPlansReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetKolPlans bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.GetKolPlansResp{
			Plans: make([]*kolModel.KolPlan, 0),
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetKolPlans: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.GetKolPlansResp{
			Plans: make([]*kolModel.KolPlan, 0),
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 如果没有指定kol_id，则查询当前用户的Plans
	var kolID *int64
	var userIDPtr *int64
	if req.KolID != nil && *req.KolID > 0 {
		kolID = req.KolID
	} else {
		userIDPtr = &userID
	}

	// 调用服务层获取Plans
	plans, err := kolSvc.GetKolPlans(kolID, userIDPtr)
	if err != nil {
		hlog.Errorf("GetKolPlans service error: %v", err)
		c.JSON(http.StatusNotFound, &kolModel.GetKolPlansResp{
			Plans: make([]*kolModel.KolPlan, 0),
			BaseResp: &common.BaseResp{
				Code:    404,
				Message: err.Error(),
			},
		})
		return
	}

	// 辅助函数：将指针字符串转换为字符串
	ptrToStr := func(s *string) string {
		if s != nil {
			return *s
		}
		return ""
	}

	// 转换为响应格式
	// 确保即使没有数据也返回空数组而不是 null
	planList := make([]*kolModel.KolPlan, 0, len(plans))
	for _, plan := range plans {
		planList = append(planList, &kolModel.KolPlan{
			ID:          plan.ID,
			Title:       plan.Title,
			Description: ptrToStr(plan.Description),
			Price:       plan.Price,
			PlanType:    plan.PlanType,
			CreatedAt:   plan.CreatedAt.Format("2006-01-02 15:04:05"),
			UpdatedAt:   plan.UpdatedAt.Format("2006-01-02 15:04:05"),
		})
	}

	resp := &kolModel.GetKolPlansResp{
		Plans: planList,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// CreateKolVideo 创建KOL视频
// @router /api/v1/kol/video/create [POST]
func CreateKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.CreateKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("CreateKolVideo bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.CreateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("CreateKolVideo: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.CreateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层创建视频
	videoID, err := kolSvc.CreateKolVideo(userID, req.Title, req.Content, req.CoverURL,
		req.VideoURL, req.Platform, req.PlatformVideoID, req.LikesCount, req.ViewsCount,
		req.CommentsCount, req.SharesCount, req.PublishedAt)
	if err != nil {
		hlog.Errorf("CreateKolVideo service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.CreateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.CreateKolVideoResp{
		VideoID: &videoID,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolVideo 更新KOL视频
// @router /api/v1/kol/video/update [POST]
func UpdateKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.UpdateKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("UpdateKolVideo bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("UpdateKolVideo: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.UpdateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层更新视频
	err = kolSvc.UpdateKolVideo(userID, req.VideoID, req.Title, req.Content, req.CoverURL,
		req.VideoURL, req.LikesCount, req.ViewsCount, req.CommentsCount, req.SharesCount)
	if err != nil {
		hlog.Errorf("UpdateKolVideo service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.UpdateKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.UpdateKolVideoResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteKolVideo 删除KOL视频
// @router /api/v1/kol/video/delete [POST]
func DeleteKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.DeleteKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("DeleteKolVideo bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.DeleteKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("DeleteKolVideo: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.DeleteKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层删除视频
	err = kolSvc.DeleteKolVideo(userID, req.VideoID)
	if err != nil {
		hlog.Errorf("DeleteKolVideo service error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.DeleteKolVideoResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &kolModel.DeleteKolVideoResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetKolVideos 获取KOL视频列表
// @router /api/v1/kol/videos [POST]
func GetKolVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kolModel.GetKolVideosReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetKolVideos bind error: %v", err)
		c.JSON(http.StatusBadRequest, &kolModel.GetKolVideosResp{
			Videos: make([]*kolModel.KolVideo, 0),
			Total:  0,
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetKolVideos: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &kolModel.GetKolVideosResp{
			Videos: make([]*kolModel.KolVideo, 0),
			Total:  0,
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 如果没有指定kol_id，则查询当前用户的视频
	var kolID *int64
	var userIDPtr *int64
	if req.KolID != nil && *req.KolID > 0 {
		kolID = req.KolID
	} else {
		userIDPtr = &userID
	}

	page := 1
	pageSize := 10
	if req.Page != nil && *req.Page > 0 {
		page = int(*req.Page)
	}
	if req.PageSize != nil && *req.PageSize > 0 {
		pageSize = int(*req.PageSize)
	}

	// 调用服务层获取视频列表
	videos, total, err := kolSvc.GetKolVideos(kolID, userIDPtr, page, pageSize)
	if err != nil {
		hlog.Errorf("GetKolVideos service error: %v", err)
		c.JSON(http.StatusNotFound, &kolModel.GetKolVideosResp{
			Videos: make([]*kolModel.KolVideo, 0),
			Total:  0,
			BaseResp: &common.BaseResp{
				Code:    404,
				Message: err.Error(),
			},
		})
		return
	}

	// 辅助函数：将指针字符串转换为字符串
	ptrToStr := func(s *string) string {
		if s != nil {
			return *s
		}
		return ""
	}

	// 转换为响应格式
	// 确保即使没有数据也返回空数组而不是 null
	videoList := make([]*kolModel.KolVideo, 0, len(videos))
	for _, video := range videos {
		videoInfo := &kolModel.KolVideo{
			ID:              video.ID,
			Title:           video.Title,
			Content:         ptrToStr(video.Content),
			CoverURL:        ptrToStr(video.CoverURL),
			VideoURL:        ptrToStr(video.VideoURL),
			Platform:        video.Platform,
			PlatformVideoID: ptrToStr(video.PlatformVideoID),
			LikesCount:      video.LikesCount,
			ViewsCount:      video.ViewsCount,
			CommentsCount:   video.CommentsCount,
			SharesCount:     video.SharesCount,
			CreatedAt:       video.CreatedAt.Format("2006-01-02 15:04:05"),
		}
		if video.PublishedAt != nil {
			publishedAt := video.PublishedAt.Format("2006-01-02 15:04:05")
			videoInfo.PublishedAt = publishedAt
		}
		videoList = append(videoList, videoInfo)
	}

	resp := &kolModel.GetKolVideosResp{
		Videos: videoList,
		Total:  total,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}
