// Code generated by hertz generator.

package auth

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	auth "orbia_api/biz/model/auth"
	"orbia_api/biz/model/common"
	authService "orbia_api/biz/service/auth"
	walletService "orbia_api/biz/service/wallet"
)

var (
	authSvc authService.AuthService
)

// InitAuthService 初始化认证服务
func InitAuthService() {
	db := mysql.DB
	userRepo := mysql.NewUserRepository(db)
	teamRepo := mysql.NewTeamRepository(db)
	walletRepo := mysql.NewWalletRepository(db)
	txRepo := mysql.NewTransactionRepository(db)
	verificationRepo := mysql.NewVerificationCodeRepository(db)
	walletSvc := walletService.NewWalletService(db, walletRepo, txRepo)
	authSvc = authService.NewAuthService(userRepo, teamRepo, walletSvc, verificationRepo)
}

// WalletLogin 钱包登录
// @router /api/v1/auth/wallet-login [POST]
func WalletLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.WalletLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("WalletLogin bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.WalletLoginResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 调用服务层处理登录逻辑
	var message string
	if req.Message != nil {
		message = *req.Message
	}
	token, expiresIn, err := authSvc.WalletLogin(req.WalletAddress, req.Signature, message)
	if err != nil {
		hlog.Errorf("WalletLogin service error: %v", err)
		c.JSON(http.StatusUnauthorized, &auth.WalletLoginResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &auth.WalletLoginResp{
		Token:     token,
		ExpiresIn: expiresIn,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Login successful",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// EmailLogin 邮箱登录
// @router /api/v1/auth/email-login [POST]
func EmailLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.EmailLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("EmailLogin bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.EmailLoginResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 调用服务层处理登录逻辑
	token, expiresIn, err := authSvc.EmailLogin(req.Email, req.Code)
	if err != nil {
		hlog.Errorf("EmailLogin service error: %v", err)
		c.JSON(http.StatusUnauthorized, &auth.EmailLoginResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &auth.EmailLoginResp{
		Token:     token,
		ExpiresIn: expiresIn,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Login successful",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// SendVerificationCode 发送验证码
// @router /api/v1/auth/send-verification-code [POST]
func SendVerificationCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.SendVerificationCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("SendVerificationCode bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.SendVerificationCodeResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 获取验证码类型
	var codeType string
	if req.CodeType != nil {
		codeType = *req.CodeType
	}

	// 调用服务层发送验证码
	err = authSvc.SendVerificationCode(req.Email, codeType)
	if err != nil {
		hlog.Errorf("SendVerificationCode service error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.SendVerificationCodeResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &auth.SendVerificationCodeResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Verification code sent successfully",
		},
	}

	c.JSON(consts.StatusOK, resp)
}
