// Code generated by hertz generator.

package auth

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	auth "orbia_api/biz/model/auth"
	"orbia_api/biz/model/common"
	authService "orbia_api/biz/service/auth"
)

var (
	authSvc authService.AuthService
)

// InitAuthService 初始化认证服务
func InitAuthService() {
	userRepo := mysql.NewUserRepository(mysql.DB)
	teamRepo := mysql.NewTeamRepository(mysql.DB)
	authSvc = authService.NewAuthService(userRepo, teamRepo)
}

// WalletLogin 钱包登录
// @router /api/v1/auth/wallet-login [POST]
func WalletLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.WalletLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("WalletLogin bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.WalletLoginResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 调用服务层处理登录逻辑
	var message string
	if req.Message != nil {
		message = *req.Message
	}
	token, expiresIn, err := authSvc.WalletLogin(req.WalletAddress, req.Signature, message)
	if err != nil {
		hlog.Errorf("WalletLogin service error: %v", err)
		c.JSON(http.StatusUnauthorized, &auth.WalletLoginResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &auth.WalletLoginResp{
		Token:     token,
		ExpiresIn: expiresIn,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Login successful",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// EmailLogin 邮箱登录
// @router /api/v1/auth/email-login [POST]
func EmailLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.EmailLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("EmailLogin bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.EmailLoginResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 调用服务层处理登录逻辑
	token, expiresIn, err := authSvc.EmailLogin(req.Email, req.Password)
	if err != nil {
		hlog.Errorf("EmailLogin service error: %v", err)
		c.JSON(http.StatusUnauthorized, &auth.EmailLoginResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &auth.EmailLoginResp{
		Token:     token,
		ExpiresIn: expiresIn,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Login successful",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// SendCode 发送验证码（预留）
// @router /api/v1/auth/send-code [POST]
func SendCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.SendCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("SendCode bind error: %v", err)
		c.JSON(http.StatusBadRequest, &auth.SendCodeResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// TODO: 实现发送验证码逻辑
	resp := &auth.SendCodeResp{
		BaseResp: &common.BaseResp{
			Code:    501,
			Message: "Send code feature not implemented yet",
		},
	}

	c.JSON(consts.StatusNotImplemented, resp)
}
