// Code generated by hertz generator.

package kol_order

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"

	apiconsts "orbia_api/biz/consts"
	kol_order "orbia_api/biz/model/kol_order"
	"orbia_api/biz/mw"
	kolOrderService "orbia_api/biz/service/kol_order"
	"orbia_api/biz/utils"
)

// CreateKolOrder .
// @router /api/v1/kol-order/create [POST]
func CreateKolOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.CreateKolOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.CreateKolOrder(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetKolOrder .
// @router /api/v1/kol-order/detail [POST]
func GetKolOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.GetKolOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.GetKolOrder(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetUserKolOrderList .
// @router /api/v1/kol-order/user/list [POST]
func GetUserKolOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.GetUserKolOrderListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.GetUserKolOrderList(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// CancelKolOrder .
// @router /api/v1/kol-order/cancel [POST]
func CancelKolOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.CancelKolOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.CancelKolOrder(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetKolReceivedOrderList .
// @router /api/v1/kol-order/kol/list [POST]
func GetKolReceivedOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.GetKolReceivedOrderListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.GetKolReceivedOrderList(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// UpdateKolOrderStatus .
// @router /api/v1/kol-order/status/update [POST]
func UpdateKolOrderStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.UpdateKolOrderStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.UpdateKolOrderStatus(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// ConfirmKolOrderPayment .
// @router /api/v1/kol-order/payment/confirm [POST]
func ConfirmKolOrderPayment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol_order.ConfirmKolOrderPaymentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := kolOrderService.ConfirmKolOrderPayment(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}
