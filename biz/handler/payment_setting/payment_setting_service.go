// Code generated by hertz generator.

package payment_setting

import (
	"context"

	"orbia_api/biz/dal/mysql"
	payment_setting "orbia_api/biz/model/payment_setting"
	paymentSettingService "orbia_api/biz/service/payment_setting"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var psSvc *paymentSettingService.PaymentSettingService

// InitPaymentSettingService 初始化收款钱包设置服务
func InitPaymentSettingService() {
	repo := mysql.NewPaymentSettingRepository(mysql.DB)
	psSvc = paymentSettingService.NewPaymentSettingService(repo)
}

// GetPaymentSettingList .
// @router /api/v1/admin/payment-settings/list [POST]
func GetPaymentSettingList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.GetPaymentSettingListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.GetPaymentSettingList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPaymentSettingDetail .
// @router /api/v1/admin/payment-settings/:id [POST]
func GetPaymentSettingDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.GetPaymentSettingDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.GetPaymentSettingDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CreatePaymentSetting .
// @router /api/v1/admin/payment-settings/create [POST]
func CreatePaymentSetting(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.CreatePaymentSettingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.CreatePaymentSetting(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePaymentSetting .
// @router /api/v1/admin/payment-settings/update [POST]
func UpdatePaymentSetting(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.UpdatePaymentSettingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.UpdatePaymentSetting(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeletePaymentSetting .
// @router /api/v1/admin/payment-settings/delete [POST]
func DeletePaymentSetting(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.DeletePaymentSettingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.DeletePaymentSetting(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetActivePaymentSettings .
// @router /api/v1/payment-settings/active [POST]
func GetActivePaymentSettings(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_setting.GetActivePaymentSettingsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := psSvc.GetActivePaymentSettings(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
