// Code generated by hertz generator.

package recharge_order

import (
	"context"
	"strconv"

	"orbia_api/biz/consts"
	"orbia_api/biz/dal/model"
	"orbia_api/biz/dal/mysql"
	recharge_order "orbia_api/biz/model/recharge_order"
	"orbia_api/biz/mw"
	rechargeOrderService "orbia_api/biz/service/recharge_order"
	"orbia_api/biz/utils"

	"github.com/cloudwego/hertz/pkg/app"
)

var (
	rechargeOrderSvc rechargeOrderService.RechargeOrderService
)

// InitRechargeOrderHandler 初始化充值订单 handler
func InitRechargeOrderHandler() {
	db := mysql.DB
	rechargeOrderRepo := mysql.NewRechargeOrderRepository(db)
	paymentSettingRepo := mysql.NewPaymentSettingRepository(db)
	walletRepo := mysql.NewWalletRepository(db)
	rechargeOrderSvc = rechargeOrderService.NewRechargeOrderService(db, rechargeOrderRepo, paymentSettingRepo, walletRepo)
}

// CreateCryptoRechargeOrder 创建加密货币充值订单
// @router /api/v1/recharge/create/crypto [POST]
func CreateCryptoRechargeOrder(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.CreateCryptoRechargeOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	// 解析金额
	amount, err := strconv.ParseFloat(req.Amount, 64)
	if err != nil {
		utils.ErrorResponse(c, 400, "invalid amount format")
		return
	}

	// 创建充值订单
	order, err := rechargeOrderSvc.CreateCryptoRechargeOrder(
		userID,
		amount,
		req.PaymentSettingID,
		req.UserCryptoAddress,
		req.CryptoTxHash,
		req.Remark,
	)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	utils.SuccessResponse(c, map[string]interface{}{
		"order": buildRechargeOrderInfo(order),
	})
}

// CreateOnlineRechargeOrder 创建在线支付充值订单
// @router /api/v1/recharge/create/online [POST]
func CreateOnlineRechargeOrder(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.CreateOnlineRechargeOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	// 解析金额
	amount, err := strconv.ParseFloat(req.Amount, 64)
	if err != nil {
		utils.ErrorResponse(c, 400, "invalid amount format")
		return
	}

	// 创建充值订单
	order, paymentURL, err := rechargeOrderSvc.CreateOnlineRechargeOrder(
		userID,
		amount,
		req.Platform,
	)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	result := map[string]interface{}{
		"order": buildRechargeOrderInfo(order),
	}
	if paymentURL != "" {
		result["payment_url"] = paymentURL
	}
	utils.SuccessResponse(c, result)
}

// GetMyRechargeOrders 获取我的充值订单列表
// @router /api/v1/recharge/my/list [POST]
func GetMyRechargeOrders(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.GetMyRechargeOrdersReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	// 设置默认分页参数
	page := 1
	pageSize := 10
	if req.Page != nil {
		page = int(*req.Page)
	}
	if req.PageSize != nil {
		pageSize = int(*req.PageSize)
	}

	// 查询充值订单列表
	orders, total, err := rechargeOrderSvc.GetMyRechargeOrders(userID, req.Status, page, pageSize)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	orderList := make([]map[string]interface{}, 0, len(orders))
	for _, order := range orders {
		orderList = append(orderList, buildRechargeOrderInfo(order))
	}

	utils.SuccessResponse(c, map[string]interface{}{
		"orders":    orderList,
		"total":     total,
		"page":      page,
		"page_size": pageSize,
	})
}

// GetRechargeOrderDetail 获取充值订单详情
// @router /api/v1/recharge/detail/:order_id [POST]
func GetRechargeOrderDetail(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.GetRechargeOrderDetailReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取用户ID和角色
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	userRole, _ := mw.GetAuthUserRole(c)
	isAdmin := userRole == consts.RoleAdmin

	// 获取充值订单详情
	order, err := rechargeOrderSvc.GetRechargeOrderDetail(userID, req.OrderID, isAdmin)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	utils.SuccessResponse(c, map[string]interface{}{
		"order": buildRechargeOrderInfo(order),
	})
}

// GetAllRechargeOrders 获取所有充值订单列表（管理员）
// @router /api/v1/admin/recharge/list [POST]
func GetAllRechargeOrders(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.GetAllRechargeOrdersReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 设置默认分页参数
	page := 1
	pageSize := 10
	if req.Page != nil {
		page = int(*req.Page)
	}
	if req.PageSize != nil {
		pageSize = int(*req.PageSize)
	}

	// 查询所有充值订单
	orders, total, err := rechargeOrderSvc.GetAllRechargeOrders(req.UserID, req.Status, req.PaymentType, page, pageSize)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	orderList := make([]map[string]interface{}, 0, len(orders))
	for _, order := range orders {
		orderList = append(orderList, buildRechargeOrderInfo(order))
	}

	utils.SuccessResponse(c, map[string]interface{}{
		"orders":    orderList,
		"total":     total,
		"page":      page,
		"page_size": pageSize,
	})
}

// ConfirmRechargeOrder 确认充值订单（管理员）
// @router /api/v1/admin/recharge/confirm [POST]
func ConfirmRechargeOrder(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.ConfirmRechargeOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取管理员用户ID
	adminUserID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	// 确认充值订单
	order, err := rechargeOrderSvc.ConfirmRechargeOrder(adminUserID, req.OrderID, req.CryptoTxHash, req.Remark)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	utils.SuccessResponse(c, map[string]interface{}{
		"order": buildRechargeOrderInfo(order),
	})
}

// RejectRechargeOrder 拒绝充值订单（管理员）
// @router /api/v1/admin/recharge/reject [POST]
func RejectRechargeOrder(ctx context.Context, c *app.RequestContext) {
	var req recharge_order.RejectRechargeOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ErrorResponse(c, 400, err.Error())
		return
	}

	// 从上下文获取管理员用户ID
	adminUserID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.ErrorResponse(c, 401, "unauthorized")
		return
	}

	// 拒绝充值订单
	order, err := rechargeOrderSvc.RejectRechargeOrder(adminUserID, req.OrderID, req.FailedReason)
	if err != nil {
		utils.ErrorResponse(c, 500, err.Error())
		return
	}

	// 构建响应
	utils.SuccessResponse(c, map[string]interface{}{
		"order": buildRechargeOrderInfo(order),
	})
}

// buildRechargeOrderInfo 构建充值订单信息
func buildRechargeOrderInfo(order *model.OrbiaRechargeOrder) map[string]interface{} {
	info := map[string]interface{}{
		"id":           order.ID,
		"order_id":     order.OrderID,
		"user_id":      order.UserID,
		"amount":       formatAmount(order.Amount),
		"payment_type": order.PaymentType,
		"status":       order.Status,
		"created_at":   utils.FormatTime(order.CreatedAt),
		"updated_at":   utils.FormatTime(order.UpdatedAt),
	}

	if order.PaymentSettingID != nil {
		info["payment_setting_id"] = *order.PaymentSettingID
	}
	if order.PaymentNetwork != nil {
		info["payment_network"] = *order.PaymentNetwork
	}
	if order.PaymentAddress != nil {
		info["payment_address"] = *order.PaymentAddress
	}
	if order.PaymentLabel != nil {
		info["payment_label"] = *order.PaymentLabel
	}
	if order.UserCryptoAddress != nil {
		info["user_crypto_address"] = *order.UserCryptoAddress
	}
	if order.CryptoTxHash != nil {
		info["crypto_tx_hash"] = *order.CryptoTxHash
	}
	if order.OnlinePaymentPlatform != nil {
		info["online_payment_platform"] = *order.OnlinePaymentPlatform
	}
	if order.OnlinePaymentOrderID != nil {
		info["online_payment_order_id"] = *order.OnlinePaymentOrderID
	}
	if order.OnlinePaymentURL != nil {
		info["online_payment_url"] = *order.OnlinePaymentURL
	}
	if order.ConfirmedBy != nil {
		info["confirmed_by"] = *order.ConfirmedBy
	}
	if order.ConfirmedAt != nil {
		info["confirmed_at"] = utils.FormatTime(order.ConfirmedAt)
	}
	if order.FailedReason != nil {
		info["failed_reason"] = *order.FailedReason
	}
	if order.Remark != nil {
		info["remark"] = *order.Remark
	}

	return info
}

// formatAmount 格式化金额
func formatAmount(amount float64) string {
	return strconv.FormatFloat(amount, 'f', 2, 64)
}
