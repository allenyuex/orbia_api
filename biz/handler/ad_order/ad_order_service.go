// Code generated by hertz generator.

package ad_order

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"

	apiconsts "orbia_api/biz/consts"
	ad_order "orbia_api/biz/model/ad_order"
	"orbia_api/biz/mw"
	adOrderService "orbia_api/biz/service/ad_order"
	"orbia_api/biz/utils"
)

// CreateAdOrder .
// @router /api/v1/ad-order/create [POST]
func CreateAdOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.CreateAdOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := adOrderService.CreateAdOrder(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetAdOrder .
// @router /api/v1/ad-order/detail [POST]
func GetAdOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.GetAdOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID和角色
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	role, _ := mw.GetAuthUserRole(c)
	isAdmin := role == "admin"

	// 调用 service 层
	resp, err := adOrderService.GetAdOrder(userID, isAdmin, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetUserAdOrderList .
// @router /api/v1/ad-order/user/list [POST]
func GetUserAdOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.GetUserAdOrderListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := adOrderService.GetUserAdOrderList(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// CancelAdOrder .
// @router /api/v1/ad-order/cancel [POST]
func CancelAdOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.CancelAdOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, apiconsts.UnauthorizedCode, "未登录")
		return
	}

	// 调用 service 层
	resp, err := adOrderService.CancelAdOrder(userID, &req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetAdOrderList .
// @router /api/v1/ad-order/admin/list [POST]
func GetAdOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.GetAdOrderListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 调用 service 层（管理员接口，需在 router 中配置权限）
	resp, err := adOrderService.GetAdOrderList(&req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}

// UpdateAdOrderStatus .
// @router /api/v1/ad-order/status/update [POST]
func UpdateAdOrderStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ad_order.UpdateAdOrderStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.ParamError(c, err.Error())
		return
	}

	// 调用 service 层（管理员接口，需在 router 中配置权限）
	resp, err := adOrderService.UpdateAdOrderStatus(&req)
	if err != nil {
		utils.Error(c, apiconsts.SystemErrorCode, err.Error())
		return
	}

	utils.Success(c, resp)
}
