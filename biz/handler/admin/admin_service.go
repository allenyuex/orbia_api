// Code generated by hertz generator.

package admin

import (
	"context"

	"orbia_api/biz/dal/mysql"
	admin "orbia_api/biz/model/admin"
	adminService "orbia_api/biz/service/admin"
	"orbia_api/biz/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var adminSvc *adminService.AdminService

// InitAdminService 初始化管理员服务
func InitAdminService() {
	userRepo := mysql.NewUserRepository(mysql.DB)
	kolRepo := mysql.NewKolRepository(mysql.DB)
	teamRepo := mysql.NewTeamRepository(mysql.DB)
	orderRepo := mysql.NewOrderRepository(mysql.DB)
	walletRepo := mysql.NewWalletRepository(mysql.DB)
	adminSvc = adminService.NewAdminService(userRepo, kolRepo, teamRepo, orderRepo, walletRepo)
}

// GetAllUsers .
// @router /api/v1/admin/users [POST]
func GetAllUsers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetAllUsersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 转换为service层的请求
	serviceReq := &admin.GetAllUsersReq{
		Keyword:  req.Keyword,
		Role:     req.Role,
		Status:   req.Status,
		Page:     req.Page,
		PageSize: req.PageSize,
	}

	resp, err := adminSvc.GetAllUsers(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// SetUserStatus .
// @router /api/v1/admin/user/status [POST]
func SetUserStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.SetUserStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.SetUserStatusReq{
		UserID: req.UserID,
		Status: req.Status,
	}

	resp, err := adminSvc.SetUserStatus(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetAllKols .
// @router /api/v1/admin/kols [POST]
func GetAllKols(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetAllKolsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.GetAllKolsReq{
		Keyword:  req.Keyword,
		Status:   req.Status,
		Country:  req.Country,
		Tag:      req.Tag,
		Page:     req.Page,
		PageSize: req.PageSize,
	}

	resp, err := adminSvc.GetAllKols(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AdminReviewKol .
// @router /api/v1/admin/kol/review [POST]
func AdminReviewKol(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.AdminReviewKolReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.AdminReviewKolReq{
		KolID:        req.KolID,
		Status:       req.Status,
		RejectReason: req.RejectReason,
	}

	resp, err := adminSvc.AdminReviewKol(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetAllTeams .
// @router /api/v1/admin/teams [POST]
func GetAllTeams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetAllTeamsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.GetAllTeamsReq{
		Keyword:  req.Keyword,
		Page:     req.Page,
		PageSize: req.PageSize,
	}

	resp, err := adminSvc.GetAllTeams(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetTeamMembers .
// @router /api/v1/admin/team/:team_id/members [POST]
func GetTeamMembers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetTeamMembersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.GetTeamMembersReq{
		TeamID:   req.TeamID,
		Page:     req.Page,
		PageSize: req.PageSize,
	}

	resp, err := adminSvc.GetTeamMembers(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetAllOrders .
// @router /api/v1/admin/orders [POST]
func GetAllOrders(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetAllOrdersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.GetAllOrdersReq{
		Keyword:  req.Keyword,
		Status:   req.Status,
		Page:     req.Page,
		PageSize: req.PageSize,
	}

	resp, err := adminSvc.GetAllOrders(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserWallet .
// @router /api/v1/admin/user/:user_id/wallet [POST]
func GetUserWallet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.GetUserWalletReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceReq := &admin.GetUserWalletReq{
		UserID: req.UserID,
	}

	resp, err := adminSvc.GetUserWallet(ctx, serviceReq)
	if err != nil {
		c.JSON(consts.StatusOK, utils.BuildErrorResp(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}
