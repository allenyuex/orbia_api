// Code generated by hertz generator.

package upload

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	upload "orbia_api/biz/model/upload"
	uploadService "orbia_api/biz/service/upload"
	"orbia_api/biz/utils"
)

// GenerateUploadToken .
// @router /api/v1/upload/token [POST]
func GenerateUploadToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req upload.GenerateUploadTokenReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从JWT中获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(consts.StatusUnauthorized, utils.ErrorResponse(401, "unauthorized"))
		return
	}

	// 调用service层
	service := uploadService.NewUploadService()
	resp, err := service.GenerateUploadToken(userID.(int64), &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.ErrorResponse(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ValidateImageURL .
// @router /api/v1/upload/validate [POST]
func ValidateImageURL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req upload.ValidateImageURLReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从JWT中获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(consts.StatusUnauthorized, utils.ErrorResponse(401, "unauthorized"))
		return
	}

	// 调用service层
	service := uploadService.NewUploadService()
	resp, err := service.ValidateImageURL(userID.(int64), &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.ErrorResponse(500, err.Error()))
		return
	}

	c.JSON(consts.StatusOK, resp)
}
