// Code generated by hertz generator.

package upload

import (
	"context"

	upload "orbia_api/biz/model/upload"
	"orbia_api/biz/mw"
	uploadService "orbia_api/biz/service/upload"
	"orbia_api/biz/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GenerateUploadToken .
// @router /api/v1/upload/token [POST]
func GenerateUploadToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req upload.GenerateUploadTokenReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从JWT中获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, 401, "unauthorized")
		return
	}

	// 调用service层
	service := uploadService.NewUploadService()
	resp, err := service.GenerateUploadToken(userID, &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ValidateFileURL .
// @router /api/v1/upload/validate [POST]
func ValidateFileURL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req upload.ValidateFileURLReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从JWT中获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.Error(c, 401, "unauthorized")
		return
	}

	// 调用service层
	service := uploadService.NewUploadService()
	resp, err := service.ValidateFileURL(userID, &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}
