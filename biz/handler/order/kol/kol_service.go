// Code generated by hertz generator.

package kol

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	kol "orbia_api/biz/model/order/kol"
)

// ApplyKol .
// @router /api/v1/kol/apply [POST]
func ApplyKol(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.ApplyKolReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.ApplyKolResp)

	c.JSON(consts.StatusOK, resp)
}

// GetKolInfo .
// @router /api/v1/kol/info [POST]
func GetKolInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.GetKolInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.GetKolInfoResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolInfo .
// @router /api/v1/kol/update [POST]
func UpdateKolInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.UpdateKolInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.UpdateKolInfoResp)

	c.JSON(consts.StatusOK, resp)
}

// ReviewKol .
// @router /api/v1/kol/review [POST]
func ReviewKol(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.ReviewKolReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.ReviewKolResp)

	c.JSON(consts.StatusOK, resp)
}

// GetKolList .
// @router /api/v1/kol/list [POST]
func GetKolList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.GetKolListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.GetKolListResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolStats .
// @router /api/v1/kol/stats/update [POST]
func UpdateKolStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.UpdateKolStatsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.UpdateKolStatsResp)

	c.JSON(consts.StatusOK, resp)
}

// SaveKolPlan .
// @router /api/v1/kol/plan/save [POST]
func SaveKolPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.SaveKolPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.SaveKolPlanResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteKolPlan .
// @router /api/v1/kol/plan/delete [POST]
func DeleteKolPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.DeleteKolPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.DeleteKolPlanResp)

	c.JSON(consts.StatusOK, resp)
}

// GetKolPlans .
// @router /api/v1/kol/plans [POST]
func GetKolPlans(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.GetKolPlansReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.GetKolPlansResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateKolVideo .
// @router /api/v1/kol/video/create [POST]
func CreateKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.CreateKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.CreateKolVideoResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateKolVideo .
// @router /api/v1/kol/video/update [POST]
func UpdateKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.UpdateKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.UpdateKolVideoResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteKolVideo .
// @router /api/v1/kol/video/delete [POST]
func DeleteKolVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.DeleteKolVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.DeleteKolVideoResp)

	c.JSON(consts.StatusOK, resp)
}

// GetKolVideos .
// @router /api/v1/kol/videos [POST]
func GetKolVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kol.GetKolVideosReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(kol.GetKolVideosResp)

	c.JSON(consts.StatusOK, resp)
}
