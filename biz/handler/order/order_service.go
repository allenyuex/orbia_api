// Code generated by hertz generator.

package order

import (
	"context"

	orderModel "orbia_api/biz/model/order/order"
	orderService "orbia_api/biz/service/order"
	"orbia_api/biz/utils"

	"github.com/cloudwego/hertz/pkg/app"
)

// InitOrderService 初始化订单服务
func InitOrderService() {
	orderService.InitOrderService()
}

// CreateOrder 创建订单
// @router /api/v1/order/create [POST]
func CreateOrder(ctx context.Context, c *app.RequestContext) {
	var req orderModel.CreateOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.CreateOrder(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetOrder 获取订单详情
// @router /api/v1/order/detail [POST]
func GetOrder(ctx context.Context, c *app.RequestContext) {
	var req orderModel.GetOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.GetOrder(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetOrderList 获取订单列表
// @router /api/v1/order/list [POST]
func GetOrderList(ctx context.Context, c *app.RequestContext) {
	var req orderModel.GetOrderListReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.GetOrderList(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}

// CancelOrder 取消订单
// @router /api/v1/order/cancel [POST]
func CancelOrder(ctx context.Context, c *app.RequestContext) {
	var req orderModel.CancelOrderReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.CancelOrder(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}

// GetKolOrders 获取KOL收到的订单列表
// @router /api/v1/order/kol/list [POST]
func GetKolOrders(ctx context.Context, c *app.RequestContext) {
	var req orderModel.GetKolOrdersReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.GetKolOrders(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}

// UpdateOrderStatus 更新订单状态
// @router /api/v1/order/status/update [POST]
func UpdateOrderStatus(ctx context.Context, c *app.RequestContext) {
	var req orderModel.UpdateOrderStatusReq
	if err := c.BindAndValidate(&req); err != nil {
		utils.ParamError(c, "参数错误: "+err.Error())
		return
	}

	// 从上下文获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		utils.Error(c, 401, "未登录")
		return
	}

	resp, err := orderService.UpdateOrderStatus(userID.(int64), &req)
	if err != nil {
		utils.Error(c, 500, err.Error())
		return
	}

	utils.Success(c, resp)
}
