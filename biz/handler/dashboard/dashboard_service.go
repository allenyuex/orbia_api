// Code generated by hertz generator.

package dashboard

import (
	"context"

	"orbia_api/biz/dal/mysql"
	dashboard "orbia_api/biz/model/dashboard"
	dashboardService "orbia_api/biz/service/dashboard"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var dashSvc *dashboardService.DashboardService

// InitDashboardService 初始化Dashboard服务
func InitDashboardService() {
	excellentCaseRepo := mysql.NewExcellentCaseRepository(mysql.DB)
	contentTrendRepo := mysql.NewContentTrendRepository(mysql.DB)
	platformStatsRepo := mysql.NewPlatformStatsRepository(mysql.DB)
	dashSvc = dashboardService.NewDashboardService(excellentCaseRepo, contentTrendRepo, platformStatsRepo)
}

// ==================== 优秀广告案例管理 ====================

// CreateExcellentCase .
// @router /api/v1/admin/dashboard/excellent-case/create [POST]
func CreateExcellentCase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.CreateExcellentCaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.CreateExcellentCase(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateExcellentCase .
// @router /api/v1/admin/dashboard/excellent-case/update [POST]
func UpdateExcellentCase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.UpdateExcellentCaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.UpdateExcellentCase(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteExcellentCase .
// @router /api/v1/admin/dashboard/excellent-case/delete [POST]
func DeleteExcellentCase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.DeleteExcellentCaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.DeleteExcellentCase(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetExcellentCaseList .
// @router /api/v1/admin/dashboard/excellent-case/list [POST]
func GetExcellentCaseList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetExcellentCaseListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetExcellentCaseList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetExcellentCaseDetail .
// @router /api/v1/admin/dashboard/excellent-case/:id [POST]
func GetExcellentCaseDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetExcellentCaseDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetExcellentCaseDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ==================== 内容趋势管理 ====================

// CreateContentTrend .
// @router /api/v1/admin/dashboard/content-trend/create [POST]
func CreateContentTrend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.CreateContentTrendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.CreateContentTrend(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateContentTrend .
// @router /api/v1/admin/dashboard/content-trend/update [POST]
func UpdateContentTrend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.UpdateContentTrendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.UpdateContentTrend(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteContentTrend .
// @router /api/v1/admin/dashboard/content-trend/delete [POST]
func DeleteContentTrend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.DeleteContentTrendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.DeleteContentTrend(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetContentTrendList .
// @router /api/v1/admin/dashboard/content-trend/list [POST]
func GetContentTrendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetContentTrendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetContentTrendList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetContentTrendDetail .
// @router /api/v1/admin/dashboard/content-trend/:id [POST]
func GetContentTrendDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetContentTrendDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetContentTrendDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ==================== 平台数据统计管理 ====================

// UpdatePlatformStats .
// @router /api/v1/admin/dashboard/platform-stats/update [POST]
func UpdatePlatformStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.UpdatePlatformStatsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.UpdatePlatformStats(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPlatformStats .
// @router /api/v1/admin/dashboard/platform-stats [POST]
func GetPlatformStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetPlatformStatsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetPlatformStats(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ==================== Dashboard数据（普通用户接口） ====================

// GetDashboardData .
// @router /api/v1/dashboard/data [POST]
func GetDashboardData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dashboard.GetDashboardDataReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dashSvc.GetDashboardData(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
