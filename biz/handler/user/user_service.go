// Code generated by hertz generator.

package user

import (
	"context"
	"net/http"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	"orbia_api/biz/model/common"
	"orbia_api/biz/model/team"
	user "orbia_api/biz/model/user"
	"orbia_api/biz/mw"
	userService "orbia_api/biz/service/user"
)

var (
	userSvc userService.UserService
)

// InitUserService 初始化用户服务
func InitUserService() {
	userRepo := mysql.NewUserRepository(mysql.DB)
	teamRepo := mysql.NewTeamRepository(mysql.DB)
	userSvc = userService.NewUserService(userRepo, teamRepo)
}

// GetProfile 获取用户资料
// @router /api/v1/user/profile [POST]
func GetProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetProfileReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetProfile bind error: %v", err)
		c.JSON(http.StatusBadRequest, &user.GetProfileResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetProfile: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &user.GetProfileResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层获取用户信息
	userInfo, currentTeam, err := userSvc.GetProfile(userID)
	if err != nil {
		hlog.Errorf("GetProfile service error: %v", err)
		c.JSON(http.StatusNotFound, &user.GetProfileResp{
			BaseResp: &common.BaseResp{
				Code:    404,
				Message: err.Error(),
			},
		})
		return
	}

	// 转换为响应格式
	userResp := &user.UserInfo{
		ID:            userInfo.ID,
		WalletAddress: userInfo.WalletAddress,
		Email:         userInfo.Email,
		Nickname:      userInfo.Nickname,
		AvatarURL:     userInfo.AvatarURL,
		CreatedAt:     userInfo.CreatedAt.Format("2006-01-02 15:04:05"),
		UpdatedAt:     userInfo.UpdatedAt.Format("2006-01-02 15:04:05"),
	}

	// 如果有当前团队信息，添加到响应中
	if currentTeam != nil {
		userResp.CurrentTeam = &team.Team{
			ID:        currentTeam.ID,
			Name:      currentTeam.Name,
			IconURL:   currentTeam.IconURL,
			CreatorID: currentTeam.CreatorID,
			CreatedAt: currentTeam.CreatedAt.Format("2006-01-02 15:04:05"),
			UpdatedAt: currentTeam.UpdatedAt.Format("2006-01-02 15:04:05"),
		}
	}

	resp := &user.GetProfileResp{
		User: userResp,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateProfile 更新用户资料
// @router /api/v1/user/update-profile [POST]
func UpdateProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateProfileReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("UpdateProfile bind error: %v", err)
		c.JSON(http.StatusBadRequest, &user.UpdateProfileResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("UpdateProfile: user ID not found in context")
		c.JSON(http.StatusUnauthorized, &user.UpdateProfileResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层更新用户信息
	err = userSvc.UpdateProfile(userID, req.Nickname, req.AvatarURL)
	if err != nil {
		hlog.Errorf("UpdateProfile service error: %v", err)
		c.JSON(http.StatusBadRequest, &user.UpdateProfileResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &user.UpdateProfileResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Profile updated successfully",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserById 根据ID获取用户信息
// @router /api/v1/user/:user_id [POST]
func GetUserById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserByIdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetUserById bind error: %v", err)
		c.JSON(http.StatusBadRequest, &user.GetUserByIdResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从路径参数获取用户ID
	userIDStr := c.Param("user_id")
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		hlog.Errorf("GetUserById parse user_id error: %v", err)
		c.JSON(http.StatusBadRequest, &user.GetUserByIdResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid user ID format",
			},
		})
		return
	}

	// 调用服务层获取用户信息
	userInfo, err := userSvc.GetUserByID(userID)
	if err != nil {
		hlog.Errorf("GetUserById service error: %v", err)
		c.JSON(http.StatusNotFound, &user.GetUserByIdResp{
			BaseResp: &common.BaseResp{
				Code:    404,
				Message: err.Error(),
			},
		})
		return
	}

	// 转换为响应格式
	userResp := &user.UserInfo{
		ID:            userInfo.ID,
		WalletAddress: userInfo.WalletAddress,
		Email:         userInfo.Email,
		Nickname:      userInfo.Nickname,
		AvatarURL:     userInfo.AvatarURL,
		CreatedAt:     userInfo.CreatedAt.Format("2006-01-02 15:04:05"),
		UpdatedAt:     userInfo.UpdatedAt.Format("2006-01-02 15:04:05"),
	}

	resp := &user.GetUserByIdResp{
		User: userResp,
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// SwitchCurrentTeam .
// @router /api/v1/user/switch-team [POST]
func SwitchCurrentTeam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.SwitchCurrentTeamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 获取用户ID
	userID, exists := c.Get(mw.AuthUserIDKey)
	if !exists {
		c.JSON(http.StatusUnauthorized, &user.SwitchCurrentTeamResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	// 调用服务层切换团队
	switchedTeam, err := userSvc.SwitchCurrentTeam(userID.(int64), req.TeamID)
	if err != nil {
		hlog.Errorf("SwitchCurrentTeam service error: %v", err)
		c.JSON(http.StatusBadRequest, &user.SwitchCurrentTeamResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: err.Error(),
			},
		})
		return
	}

	resp := &user.SwitchCurrentTeamResp{
		BaseResp: &common.BaseResp{
			Code:    200,
			Message: "Team switched successfully",
		},
		CurrentTeam: &team.Team{
			ID:        switchedTeam.ID,
			Name:      switchedTeam.Name,
			IconURL:   switchedTeam.IconURL,
			CreatorID: switchedTeam.CreatorID,
			CreatedAt: switchedTeam.CreatedAt.Format("2006-01-02 15:04:05"),
			UpdatedAt: switchedTeam.UpdatedAt.Format("2006-01-02 15:04:05"),
		},
	}

	c.JSON(consts.StatusOK, resp)
}
