// Code generated by hertz generator.

package dictionary

import (
	"context"

	"orbia_api/biz/dal/mysql"
	dictionary "orbia_api/biz/model/dictionary"
	dictionaryService "orbia_api/biz/service/dictionary"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var dictSvc *dictionaryService.DictionaryService

// InitDictionaryService 初始化字典服务
func InitDictionaryService() {
	dictRepo := mysql.NewDictionaryRepository(mysql.DB)
	dictItemRepo := mysql.NewDictionaryItemRepository(mysql.DB)
	dictSvc = dictionaryService.NewDictionaryService(dictRepo, dictItemRepo)
}

// CreateDictionary .
// @router /api/v1/admin/dictionary/create [POST]
func CreateDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.CreateDictionaryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.CreateDictionary(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictionary .
// @router /api/v1/admin/dictionary/update [POST]
func UpdateDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.UpdateDictionaryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.UpdateDictionary(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteDictionary .
// @router /api/v1/admin/dictionary/delete [POST]
func DeleteDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.DeleteDictionaryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.DeleteDictionary(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDictionaries .
// @router /api/v1/admin/dictionary/list [POST]
func GetDictionaries(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.GetDictionariesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.GetDictionaries(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDictionaryDetail .
// @router /api/v1/admin/dictionary/:id [POST]
func GetDictionaryDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.GetDictionaryDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.GetDictionaryDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDictionaryByCode .
// @router /api/v1/admin/dictionary/by-code [POST]
func GetDictionaryByCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.GetDictionaryByCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.GetDictionaryByCode(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CreateDictionaryItem .
// @router /api/v1/admin/dictionary/item/create [POST]
func CreateDictionaryItem(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.CreateDictionaryItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.CreateDictionaryItem(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictionaryItem .
// @router /api/v1/admin/dictionary/item/update [POST]
func UpdateDictionaryItem(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.UpdateDictionaryItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.UpdateDictionaryItem(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteDictionaryItem .
// @router /api/v1/admin/dictionary/item/delete [POST]
func DeleteDictionaryItem(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.DeleteDictionaryItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.DeleteDictionaryItem(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDictionaryItems .
// @router /api/v1/admin/dictionary/item/list [POST]
func GetDictionaryItems(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.GetDictionaryItemsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.GetDictionaryItems(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetAllDictionariesWithItems .
// @router /api/v1/dictionary/all [POST]
func GetAllDictionariesWithItems(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.GetAllDictionariesWithItemsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := dictSvc.GetAllDictionariesWithItems(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, map[string]interface{}{
			"code":    500,
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
