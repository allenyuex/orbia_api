// Code generated by hertz generator.

package team

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	"orbia_api/biz/model/common"
	team "orbia_api/biz/model/team"
	"orbia_api/biz/mw"
	teamService "orbia_api/biz/service/team"
	"orbia_api/biz/utils"
)

var (
	teamSvc teamService.TeamService
)

// InitTeamService 初始化团队服务
func InitTeamService() {
	utils.LogDebug("Initializing team service", nil)
	
	// 检查 mysql.DB 是否为 nil
	if mysql.DB == nil {
		utils.LogError(nil, "mysql.DB is nil during team service initialization")
		return
	}
	
	teamRepo := mysql.NewTeamRepository(mysql.DB)
	userRepo := mysql.NewUserRepository(mysql.DB)
	teamSvc = teamService.NewTeamService(teamRepo, userRepo)
	
	// 检查 teamSvc 是否成功初始化
	if teamSvc == nil {
		utils.LogError(nil, "failed to initialize team service")
		return
	}
	
	utils.LogInfo("Team service initialized successfully", nil)
}

// CreateTeam 创建团队
// @router /api/v1/team/create [POST]
func CreateTeam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.CreateTeamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("CreateTeam bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.CreateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("CreateTeam: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.CreateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.CreateTeam(userID, &req)
	if err != nil {
		hlog.Errorf("CreateTeam service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.CreateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to create team: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetTeam 获取团队信息
// @router /api/v1/team/:team_id [GET]
func GetTeam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.GetTeamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetTeam bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.GetTeamResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetTeam: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.GetTeamResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.GetTeam(userID, &req)
	if err != nil {
		hlog.Errorf("GetTeam service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.GetTeamResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to get team: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateTeam 更新团队信息
// @router /api/v1/team/:team_id [PUT]
func UpdateTeam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.UpdateTeamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("UpdateTeam bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.UpdateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("UpdateTeam: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.UpdateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.UpdateTeam(userID, &req)
	if err != nil {
		hlog.Errorf("UpdateTeam service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.UpdateTeamResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to update team: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserTeams 获取用户团队列表
// @router /api/v1/team/list [GET]
func GetUserTeams(ctx context.Context, c *app.RequestContext) {
	utils.LogDebug("GetUserTeams handler called", nil)
	
	// 检查 teamSvc 是否为 nil
	if teamSvc == nil {
		utils.LogError(nil, "teamSvc is nil in GetUserTeams handler")
		c.JSON(http.StatusInternalServerError, &team.GetUserTeamsResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Team service not initialized",
			},
		})
		return
	}
	
	var err error
	var req team.GetUserTeamsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.LogError(err, "GetUserTeams bind error")
		c.JSON(http.StatusBadRequest, &team.GetUserTeamsResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		utils.LogError(nil, "GetUserTeams: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.GetUserTeamsResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	utils.LogDebug("GetUserTeams called", map[string]interface{}{
		"user_id": userID,
	})

	resp, err := teamSvc.GetUserTeams(userID, &req)
	if err != nil {
		utils.LogError(err, "GetUserTeams service error")
		c.JSON(http.StatusInternalServerError, &team.GetUserTeamsResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to get user teams: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// InviteUser 邀请用户加入团队
// @router /api/v1/team/:team_id/invite [POST]
func InviteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.InviteUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("InviteUser bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.InviteUserResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("InviteUser: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.InviteUserResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.InviteUser(userID, &req)
	if err != nil {
		hlog.Errorf("InviteUser service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.InviteUserResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to invite user: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AcceptInvitation 接受邀请
// @router /api/v1/team/invitation/accept [POST]
func AcceptInvitation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.AcceptInvitationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("AcceptInvitation bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.AcceptInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("AcceptInvitation: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.AcceptInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.AcceptInvitation(userID, &req)
	if err != nil {
		hlog.Errorf("AcceptInvitation service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.AcceptInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to accept invitation: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RejectInvitation 拒绝邀请
// @router /api/v1/team/invitation/reject [POST]
func RejectInvitation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.RejectInvitationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("RejectInvitation bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.RejectInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("RejectInvitation: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.RejectInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.RejectInvitation(userID, &req)
	if err != nil {
		hlog.Errorf("RejectInvitation service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.RejectInvitationResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to reject invitation: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetTeamMembers 获取团队成员列表
// @router /api/v1/team/:team_id/members [GET]
func GetTeamMembers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.GetTeamMembersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Errorf("GetTeamMembers bind error: %v", err)
		c.JSON(http.StatusBadRequest, &team.GetTeamMembersResp{
			BaseResp: &common.BaseResp{
				Code:    400,
				Message: "Invalid request parameters: " + err.Error(),
			},
		})
		return
	}

	// 从JWT中间件获取用户ID
	userID, exists := mw.GetAuthUserID(c)
	if !exists {
		hlog.Error("GetTeamMembers: user not authenticated")
		c.JSON(http.StatusUnauthorized, &team.GetTeamMembersResp{
			BaseResp: &common.BaseResp{
				Code:    401,
				Message: "User not authenticated",
			},
		})
		return
	}

	resp, err := teamSvc.GetTeamMembers(userID, &req)
	if err != nil {
		hlog.Errorf("GetTeamMembers service error: %v", err)
		c.JSON(http.StatusInternalServerError, &team.GetTeamMembersResp{
			BaseResp: &common.BaseResp{
				Code:    500,
				Message: "Failed to get team members: " + err.Error(),
			},
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RemoveTeamMember .
// @router /api/v1/team/:team_id/member/:user_id [DELETE]
func RemoveTeamMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.RemoveTeamMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(team.RemoveTeamMemberResp)

	c.JSON(consts.StatusOK, resp)
}

// GetUserInvitations .
// @router /api/v1/team/invitations [GET]
func GetUserInvitations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req team.GetUserInvitationsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(team.GetUserInvitationsResp)

	c.JSON(consts.StatusOK, resp)
}
