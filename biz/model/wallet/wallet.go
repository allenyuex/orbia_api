// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package wallet

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"orbia_api/biz/model/common"
)

// 交易类型枚举
type TransactionType int64

const (
	// 充值
	TransactionType_RECHARGE TransactionType = 1
	// 消费
	TransactionType_CONSUME TransactionType = 2
	// 退款
	TransactionType_REFUND TransactionType = 3
	// 冻结
	TransactionType_FREEZE TransactionType = 4
	// 解冻
	TransactionType_UNFREEZE TransactionType = 5
)

func (p TransactionType) String() string {
	switch p {
	case TransactionType_RECHARGE:
		return "RECHARGE"
	case TransactionType_CONSUME:
		return "CONSUME"
	case TransactionType_REFUND:
		return "REFUND"
	case TransactionType_FREEZE:
		return "FREEZE"
	case TransactionType_UNFREEZE:
		return "UNFREEZE"
	}
	return "<UNSET>"
}

func TransactionTypeFromString(s string) (TransactionType, error) {
	switch s {
	case "RECHARGE":
		return TransactionType_RECHARGE, nil
	case "CONSUME":
		return TransactionType_CONSUME, nil
	case "REFUND":
		return TransactionType_REFUND, nil
	case "FREEZE":
		return TransactionType_FREEZE, nil
	case "UNFREEZE":
		return TransactionType_UNFREEZE, nil
	}
	return TransactionType(0), fmt.Errorf("not a valid TransactionType string")
}

func TransactionTypePtr(v TransactionType) *TransactionType { return &v }
func (p *TransactionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TransactionType(result.Int64)
	return
}

func (p *TransactionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 交易状态枚举
type TransactionStatus int64

const (
	// 待处理
	TransactionStatus_PENDING TransactionStatus = 1
	// 处理中
	TransactionStatus_PROCESSING TransactionStatus = 2
	// 已完成
	TransactionStatus_COMPLETED TransactionStatus = 3
	// 失败
	TransactionStatus_FAILED TransactionStatus = 4
	// 已取消
	TransactionStatus_CANCELLED TransactionStatus = 5
)

func (p TransactionStatus) String() string {
	switch p {
	case TransactionStatus_PENDING:
		return "PENDING"
	case TransactionStatus_PROCESSING:
		return "PROCESSING"
	case TransactionStatus_COMPLETED:
		return "COMPLETED"
	case TransactionStatus_FAILED:
		return "FAILED"
	case TransactionStatus_CANCELLED:
		return "CANCELLED"
	}
	return "<UNSET>"
}

func TransactionStatusFromString(s string) (TransactionStatus, error) {
	switch s {
	case "PENDING":
		return TransactionStatus_PENDING, nil
	case "PROCESSING":
		return TransactionStatus_PROCESSING, nil
	case "COMPLETED":
		return TransactionStatus_COMPLETED, nil
	case "FAILED":
		return TransactionStatus_FAILED, nil
	case "CANCELLED":
		return TransactionStatus_CANCELLED, nil
	}
	return TransactionStatus(0), fmt.Errorf("not a valid TransactionStatus string")
}

func TransactionStatusPtr(v TransactionStatus) *TransactionStatus { return &v }
func (p *TransactionStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TransactionStatus(result.Int64)
	return
}

func (p *TransactionStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 支付方式枚举
type PaymentMethod int64

const (
	// 加密货币
	PaymentMethod_CRYPTO PaymentMethod = 1
	// 在线支付
	PaymentMethod_ONLINE PaymentMethod = 2
)

func (p PaymentMethod) String() string {
	switch p {
	case PaymentMethod_CRYPTO:
		return "CRYPTO"
	case PaymentMethod_ONLINE:
		return "ONLINE"
	}
	return "<UNSET>"
}

func PaymentMethodFromString(s string) (PaymentMethod, error) {
	switch s {
	case "CRYPTO":
		return PaymentMethod_CRYPTO, nil
	case "ONLINE":
		return PaymentMethod_ONLINE, nil
	}
	return PaymentMethod(0), fmt.Errorf("not a valid PaymentMethod string")
}

func PaymentMethodPtr(v PaymentMethod) *PaymentMethod { return &v }
func (p *PaymentMethod) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PaymentMethod(result.Int64)
	return
}

func (p *PaymentMethod) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 加密货币类型
type CryptoCurrency int64

const (
	CryptoCurrency_USDT CryptoCurrency = 1
	CryptoCurrency_USDC CryptoCurrency = 2
)

func (p CryptoCurrency) String() string {
	switch p {
	case CryptoCurrency_USDT:
		return "USDT"
	case CryptoCurrency_USDC:
		return "USDC"
	}
	return "<UNSET>"
}

func CryptoCurrencyFromString(s string) (CryptoCurrency, error) {
	switch s {
	case "USDT":
		return CryptoCurrency_USDT, nil
	case "USDC":
		return CryptoCurrency_USDC, nil
	}
	return CryptoCurrency(0), fmt.Errorf("not a valid CryptoCurrency string")
}

func CryptoCurrencyPtr(v CryptoCurrency) *CryptoCurrency { return &v }
func (p *CryptoCurrency) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CryptoCurrency(result.Int64)
	return
}

func (p *CryptoCurrency) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 加密货币链
type CryptoChain int64

const (
	// 以太坊
	CryptoChain_ETH CryptoChain = 1
	// 币安智能链
	CryptoChain_BSC CryptoChain = 2
	// Polygon
	CryptoChain_POLYGON CryptoChain = 3
	// 波场
	CryptoChain_TRON CryptoChain = 4
	// Arbitrum
	CryptoChain_ARBITRUM CryptoChain = 5
	// Optimism
	CryptoChain_OPTIMISM CryptoChain = 6
)

func (p CryptoChain) String() string {
	switch p {
	case CryptoChain_ETH:
		return "ETH"
	case CryptoChain_BSC:
		return "BSC"
	case CryptoChain_POLYGON:
		return "POLYGON"
	case CryptoChain_TRON:
		return "TRON"
	case CryptoChain_ARBITRUM:
		return "ARBITRUM"
	case CryptoChain_OPTIMISM:
		return "OPTIMISM"
	}
	return "<UNSET>"
}

func CryptoChainFromString(s string) (CryptoChain, error) {
	switch s {
	case "ETH":
		return CryptoChain_ETH, nil
	case "BSC":
		return CryptoChain_BSC, nil
	case "POLYGON":
		return CryptoChain_POLYGON, nil
	case "TRON":
		return CryptoChain_TRON, nil
	case "ARBITRUM":
		return CryptoChain_ARBITRUM, nil
	case "OPTIMISM":
		return CryptoChain_OPTIMISM, nil
	}
	return CryptoChain(0), fmt.Errorf("not a valid CryptoChain string")
}

func CryptoChainPtr(v CryptoChain) *CryptoChain { return &v }
func (p *CryptoChain) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CryptoChain(result.Int64)
	return
}

func (p *CryptoChain) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 在线支付平台
type OnlinePaymentPlatform int64

const (
	OnlinePaymentPlatform_STRIPE OnlinePaymentPlatform = 1
	OnlinePaymentPlatform_PAYPAL OnlinePaymentPlatform = 2
)

func (p OnlinePaymentPlatform) String() string {
	switch p {
	case OnlinePaymentPlatform_STRIPE:
		return "STRIPE"
	case OnlinePaymentPlatform_PAYPAL:
		return "PAYPAL"
	}
	return "<UNSET>"
}

func OnlinePaymentPlatformFromString(s string) (OnlinePaymentPlatform, error) {
	switch s {
	case "STRIPE":
		return OnlinePaymentPlatform_STRIPE, nil
	case "PAYPAL":
		return OnlinePaymentPlatform_PAYPAL, nil
	}
	return OnlinePaymentPlatform(0), fmt.Errorf("not a valid OnlinePaymentPlatform string")
}

func OnlinePaymentPlatformPtr(v OnlinePaymentPlatform) *OnlinePaymentPlatform { return &v }
func (p *OnlinePaymentPlatform) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = OnlinePaymentPlatform(result.Int64)
	return
}

func (p *OnlinePaymentPlatform) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 钱包信息
type WalletInfo struct {
	ID     int64 `thrift:"id,1" form:"id" json:"id" query:"id"`
	UserID int64 `thrift:"user_id,2" form:"user_id" json:"user_id" query:"user_id"`
	// 可用余额
	Balance string `thrift:"balance,3" form:"balance" json:"balance" query:"balance"`
	// 冻结余额
	FrozenBalance string `thrift:"frozen_balance,4" form:"frozen_balance" json:"frozen_balance" query:"frozen_balance"`
	// 累计充值
	TotalRecharge string `thrift:"total_recharge,5" form:"total_recharge" json:"total_recharge" query:"total_recharge"`
	// 累计消费
	TotalConsume string `thrift:"total_consume,6" form:"total_consume" json:"total_consume" query:"total_consume"`
	CreatedAt    string `thrift:"created_at,7" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt    string `thrift:"updated_at,8" form:"updated_at" json:"updated_at" query:"updated_at"`
}

func NewWalletInfo() *WalletInfo {
	return &WalletInfo{}
}

func (p *WalletInfo) InitDefault() {
}

func (p *WalletInfo) GetID() (v int64) {
	return p.ID
}

func (p *WalletInfo) GetUserID() (v int64) {
	return p.UserID
}

func (p *WalletInfo) GetBalance() (v string) {
	return p.Balance
}

func (p *WalletInfo) GetFrozenBalance() (v string) {
	return p.FrozenBalance
}

func (p *WalletInfo) GetTotalRecharge() (v string) {
	return p.TotalRecharge
}

func (p *WalletInfo) GetTotalConsume() (v string) {
	return p.TotalConsume
}

func (p *WalletInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *WalletInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

var fieldIDToName_WalletInfo = map[int16]string{
	1: "id",
	2: "user_id",
	3: "balance",
	4: "frozen_balance",
	5: "total_recharge",
	6: "total_consume",
	7: "created_at",
	8: "updated_at",
}

func (p *WalletInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *WalletInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserID = _field
	return nil
}
func (p *WalletInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Balance = _field
	return nil
}
func (p *WalletInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FrozenBalance = _field
	return nil
}
func (p *WalletInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalRecharge = _field
	return nil
}
func (p *WalletInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalConsume = _field
	return nil
}
func (p *WalletInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *WalletInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *WalletInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WalletInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *WalletInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("balance", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Balance); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *WalletInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("frozen_balance", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FrozenBalance); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *WalletInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_recharge", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalRecharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *WalletInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_consume", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalConsume); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *WalletInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *WalletInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *WalletInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletInfo(%+v)", *p)

}

// 交易记录
type Transaction struct {
	ID            int64  `thrift:"id,1" form:"id" json:"id" query:"id"`
	TransactionID string `thrift:"transaction_id,2" form:"transaction_id" json:"transaction_id" query:"transaction_id"`
	UserID        int64  `thrift:"user_id,3" form:"user_id" json:"user_id" query:"user_id"`
	// TransactionType转字符串
	Type          string `thrift:"type,4" form:"type" json:"type" query:"type"`
	Amount        string `thrift:"amount,5" form:"amount" json:"amount" query:"amount"`
	BalanceBefore string `thrift:"balance_before,6" form:"balance_before" json:"balance_before" query:"balance_before"`
	BalanceAfter  string `thrift:"balance_after,7" form:"balance_after" json:"balance_after" query:"balance_after"`
	// TransactionStatus转字符串
	Status string `thrift:"status,8" form:"status" json:"status" query:"status"`
	// PaymentMethod转字符串
	PaymentMethod         *string `thrift:"payment_method,9,optional" form:"payment_method" json:"payment_method,omitempty" query:"payment_method"`
	CryptoCurrency        *string `thrift:"crypto_currency,10,optional" form:"crypto_currency" json:"crypto_currency,omitempty" query:"crypto_currency"`
	CryptoChain           *string `thrift:"crypto_chain,11,optional" form:"crypto_chain" json:"crypto_chain,omitempty" query:"crypto_chain"`
	CryptoAddress         *string `thrift:"crypto_address,12,optional" form:"crypto_address" json:"crypto_address,omitempty" query:"crypto_address"`
	CryptoTxHash          *string `thrift:"crypto_tx_hash,13,optional" form:"crypto_tx_hash" json:"crypto_tx_hash,omitempty" query:"crypto_tx_hash"`
	OnlinePaymentPlatform *string `thrift:"online_payment_platform,14,optional" form:"online_payment_platform" json:"online_payment_platform,omitempty" query:"online_payment_platform"`
	OnlinePaymentOrderID  *string `thrift:"online_payment_order_id,15,optional" form:"online_payment_order_id" json:"online_payment_order_id,omitempty" query:"online_payment_order_id"`
	OnlinePaymentURL      *string `thrift:"online_payment_url,16,optional" form:"online_payment_url" json:"online_payment_url,omitempty" query:"online_payment_url"`
	RelatedOrderID        *string `thrift:"related_order_id,17,optional" form:"related_order_id" json:"related_order_id,omitempty" query:"related_order_id"`
	Remark                *string `thrift:"remark,18,optional" form:"remark" json:"remark,omitempty" query:"remark"`
	FailedReason          *string `thrift:"failed_reason,19,optional" form:"failed_reason" json:"failed_reason,omitempty" query:"failed_reason"`
	CompletedAt           *string `thrift:"completed_at,20,optional" form:"completed_at" json:"completed_at,omitempty" query:"completed_at"`
	CreatedAt             string  `thrift:"created_at,21" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt             string  `thrift:"updated_at,22" form:"updated_at" json:"updated_at" query:"updated_at"`
}

func NewTransaction() *Transaction {
	return &Transaction{}
}

func (p *Transaction) InitDefault() {
}

func (p *Transaction) GetID() (v int64) {
	return p.ID
}

func (p *Transaction) GetTransactionID() (v string) {
	return p.TransactionID
}

func (p *Transaction) GetUserID() (v int64) {
	return p.UserID
}

func (p *Transaction) GetType() (v string) {
	return p.Type
}

func (p *Transaction) GetAmount() (v string) {
	return p.Amount
}

func (p *Transaction) GetBalanceBefore() (v string) {
	return p.BalanceBefore
}

func (p *Transaction) GetBalanceAfter() (v string) {
	return p.BalanceAfter
}

func (p *Transaction) GetStatus() (v string) {
	return p.Status
}

var Transaction_PaymentMethod_DEFAULT string

func (p *Transaction) GetPaymentMethod() (v string) {
	if !p.IsSetPaymentMethod() {
		return Transaction_PaymentMethod_DEFAULT
	}
	return *p.PaymentMethod
}

var Transaction_CryptoCurrency_DEFAULT string

func (p *Transaction) GetCryptoCurrency() (v string) {
	if !p.IsSetCryptoCurrency() {
		return Transaction_CryptoCurrency_DEFAULT
	}
	return *p.CryptoCurrency
}

var Transaction_CryptoChain_DEFAULT string

func (p *Transaction) GetCryptoChain() (v string) {
	if !p.IsSetCryptoChain() {
		return Transaction_CryptoChain_DEFAULT
	}
	return *p.CryptoChain
}

var Transaction_CryptoAddress_DEFAULT string

func (p *Transaction) GetCryptoAddress() (v string) {
	if !p.IsSetCryptoAddress() {
		return Transaction_CryptoAddress_DEFAULT
	}
	return *p.CryptoAddress
}

var Transaction_CryptoTxHash_DEFAULT string

func (p *Transaction) GetCryptoTxHash() (v string) {
	if !p.IsSetCryptoTxHash() {
		return Transaction_CryptoTxHash_DEFAULT
	}
	return *p.CryptoTxHash
}

var Transaction_OnlinePaymentPlatform_DEFAULT string

func (p *Transaction) GetOnlinePaymentPlatform() (v string) {
	if !p.IsSetOnlinePaymentPlatform() {
		return Transaction_OnlinePaymentPlatform_DEFAULT
	}
	return *p.OnlinePaymentPlatform
}

var Transaction_OnlinePaymentOrderID_DEFAULT string

func (p *Transaction) GetOnlinePaymentOrderID() (v string) {
	if !p.IsSetOnlinePaymentOrderID() {
		return Transaction_OnlinePaymentOrderID_DEFAULT
	}
	return *p.OnlinePaymentOrderID
}

var Transaction_OnlinePaymentURL_DEFAULT string

func (p *Transaction) GetOnlinePaymentURL() (v string) {
	if !p.IsSetOnlinePaymentURL() {
		return Transaction_OnlinePaymentURL_DEFAULT
	}
	return *p.OnlinePaymentURL
}

var Transaction_RelatedOrderID_DEFAULT string

func (p *Transaction) GetRelatedOrderID() (v string) {
	if !p.IsSetRelatedOrderID() {
		return Transaction_RelatedOrderID_DEFAULT
	}
	return *p.RelatedOrderID
}

var Transaction_Remark_DEFAULT string

func (p *Transaction) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return Transaction_Remark_DEFAULT
	}
	return *p.Remark
}

var Transaction_FailedReason_DEFAULT string

func (p *Transaction) GetFailedReason() (v string) {
	if !p.IsSetFailedReason() {
		return Transaction_FailedReason_DEFAULT
	}
	return *p.FailedReason
}

var Transaction_CompletedAt_DEFAULT string

func (p *Transaction) GetCompletedAt() (v string) {
	if !p.IsSetCompletedAt() {
		return Transaction_CompletedAt_DEFAULT
	}
	return *p.CompletedAt
}

func (p *Transaction) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Transaction) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

var fieldIDToName_Transaction = map[int16]string{
	1:  "id",
	2:  "transaction_id",
	3:  "user_id",
	4:  "type",
	5:  "amount",
	6:  "balance_before",
	7:  "balance_after",
	8:  "status",
	9:  "payment_method",
	10: "crypto_currency",
	11: "crypto_chain",
	12: "crypto_address",
	13: "crypto_tx_hash",
	14: "online_payment_platform",
	15: "online_payment_order_id",
	16: "online_payment_url",
	17: "related_order_id",
	18: "remark",
	19: "failed_reason",
	20: "completed_at",
	21: "created_at",
	22: "updated_at",
}

func (p *Transaction) IsSetPaymentMethod() bool {
	return p.PaymentMethod != nil
}

func (p *Transaction) IsSetCryptoCurrency() bool {
	return p.CryptoCurrency != nil
}

func (p *Transaction) IsSetCryptoChain() bool {
	return p.CryptoChain != nil
}

func (p *Transaction) IsSetCryptoAddress() bool {
	return p.CryptoAddress != nil
}

func (p *Transaction) IsSetCryptoTxHash() bool {
	return p.CryptoTxHash != nil
}

func (p *Transaction) IsSetOnlinePaymentPlatform() bool {
	return p.OnlinePaymentPlatform != nil
}

func (p *Transaction) IsSetOnlinePaymentOrderID() bool {
	return p.OnlinePaymentOrderID != nil
}

func (p *Transaction) IsSetOnlinePaymentURL() bool {
	return p.OnlinePaymentURL != nil
}

func (p *Transaction) IsSetRelatedOrderID() bool {
	return p.RelatedOrderID != nil
}

func (p *Transaction) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *Transaction) IsSetFailedReason() bool {
	return p.FailedReason != nil
}

func (p *Transaction) IsSetCompletedAt() bool {
	return p.CompletedAt != nil
}

func (p *Transaction) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Transaction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Transaction) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *Transaction) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionID = _field
	return nil
}
func (p *Transaction) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserID = _field
	return nil
}
func (p *Transaction) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *Transaction) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *Transaction) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BalanceBefore = _field
	return nil
}
func (p *Transaction) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BalanceAfter = _field
	return nil
}
func (p *Transaction) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *Transaction) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentMethod = _field
	return nil
}
func (p *Transaction) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoCurrency = _field
	return nil
}
func (p *Transaction) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoChain = _field
	return nil
}
func (p *Transaction) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoAddress = _field
	return nil
}
func (p *Transaction) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoTxHash = _field
	return nil
}
func (p *Transaction) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentPlatform = _field
	return nil
}
func (p *Transaction) ReadField15(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentOrderID = _field
	return nil
}
func (p *Transaction) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentURL = _field
	return nil
}
func (p *Transaction) ReadField17(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RelatedOrderID = _field
	return nil
}
func (p *Transaction) ReadField18(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}
func (p *Transaction) ReadField19(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailedReason = _field
	return nil
}
func (p *Transaction) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CompletedAt = _field
	return nil
}
func (p *Transaction) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Transaction) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *Transaction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Transaction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Transaction) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Transaction) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransactionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Transaction) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Transaction) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Transaction) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Transaction) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("balance_before", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BalanceBefore); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Transaction) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("balance_after", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BalanceAfter); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Transaction) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Transaction) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentMethod() {
		if err = oprot.WriteFieldBegin("payment_method", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentMethod); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Transaction) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoCurrency() {
		if err = oprot.WriteFieldBegin("crypto_currency", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoCurrency); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Transaction) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoChain() {
		if err = oprot.WriteFieldBegin("crypto_chain", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoChain); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Transaction) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoAddress() {
		if err = oprot.WriteFieldBegin("crypto_address", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoAddress); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Transaction) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoTxHash() {
		if err = oprot.WriteFieldBegin("crypto_tx_hash", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoTxHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Transaction) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentPlatform() {
		if err = oprot.WriteFieldBegin("online_payment_platform", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentPlatform); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Transaction) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentOrderID() {
		if err = oprot.WriteFieldBegin("online_payment_order_id", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentOrderID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Transaction) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentURL() {
		if err = oprot.WriteFieldBegin("online_payment_url", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Transaction) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedOrderID() {
		if err = oprot.WriteFieldBegin("related_order_id", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RelatedOrderID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Transaction) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *Transaction) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedReason() {
		if err = oprot.WriteFieldBegin("failed_reason", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FailedReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *Transaction) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletedAt() {
		if err = oprot.WriteFieldBegin("completed_at", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CompletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *Transaction) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *Transaction) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *Transaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Transaction(%+v)", *p)

}

// 获取钱包信息请求
type GetWalletInfoReq struct {
}

func NewGetWalletInfoReq() *GetWalletInfoReq {
	return &GetWalletInfoReq{}
}

func (p *GetWalletInfoReq) InitDefault() {
}

var fieldIDToName_GetWalletInfoReq = map[int16]string{}

func (p *GetWalletInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetWalletInfoReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetWalletInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetWalletInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWalletInfoReq(%+v)", *p)

}

// 获取钱包信息响应
type GetWalletInfoResp struct {
	Wallet   *WalletInfo      `thrift:"wallet,1,optional" form:"wallet" json:"wallet,omitempty" query:"wallet"`
	BaseResp *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewGetWalletInfoResp() *GetWalletInfoResp {
	return &GetWalletInfoResp{}
}

func (p *GetWalletInfoResp) InitDefault() {
}

var GetWalletInfoResp_Wallet_DEFAULT *WalletInfo

func (p *GetWalletInfoResp) GetWallet() (v *WalletInfo) {
	if !p.IsSetWallet() {
		return GetWalletInfoResp_Wallet_DEFAULT
	}
	return p.Wallet
}

var GetWalletInfoResp_BaseResp_DEFAULT *common.BaseResp

func (p *GetWalletInfoResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetWalletInfoResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_GetWalletInfoResp = map[int16]string{
	1: "wallet",
	2: "base_resp",
}

func (p *GetWalletInfoResp) IsSetWallet() bool {
	return p.Wallet != nil
}

func (p *GetWalletInfoResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetWalletInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetWalletInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetWalletInfoResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewWalletInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Wallet = _field
	return nil
}
func (p *GetWalletInfoResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetWalletInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWalletInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetWalletInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWallet() {
		if err = oprot.WriteFieldBegin("wallet", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Wallet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetWalletInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetWalletInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWalletInfoResp(%+v)", *p)

}

// 充值请求（加密货币）
type CryptoRechargeReq struct {
	// 充值金额（美元）
	Amount string `thrift:"amount,1,required" form:"amount,required" json:"amount,required"`
	// USDT 或 USDC
	CryptoCurrency string `thrift:"crypto_currency,2,required" form:"crypto_currency,required" json:"crypto_currency,required"`
	// 链类型
	CryptoChain string `thrift:"crypto_chain,3,required" form:"crypto_chain,required" json:"crypto_chain,required"`
	// 支付地址
	CryptoAddress string `thrift:"crypto_address,4,required" form:"crypto_address,required" json:"crypto_address,required"`
}

func NewCryptoRechargeReq() *CryptoRechargeReq {
	return &CryptoRechargeReq{}
}

func (p *CryptoRechargeReq) InitDefault() {
}

func (p *CryptoRechargeReq) GetAmount() (v string) {
	return p.Amount
}

func (p *CryptoRechargeReq) GetCryptoCurrency() (v string) {
	return p.CryptoCurrency
}

func (p *CryptoRechargeReq) GetCryptoChain() (v string) {
	return p.CryptoChain
}

func (p *CryptoRechargeReq) GetCryptoAddress() (v string) {
	return p.CryptoAddress
}

var fieldIDToName_CryptoRechargeReq = map[int16]string{
	1: "amount",
	2: "crypto_currency",
	3: "crypto_chain",
	4: "crypto_address",
}

func (p *CryptoRechargeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAmount bool = false
	var issetCryptoCurrency bool = false
	var issetCryptoChain bool = false
	var issetCryptoAddress bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCryptoCurrency = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCryptoChain = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCryptoAddress = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCryptoCurrency {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCryptoChain {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCryptoAddress {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CryptoRechargeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CryptoRechargeReq[fieldId]))
}

func (p *CryptoRechargeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *CryptoRechargeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CryptoCurrency = _field
	return nil
}
func (p *CryptoRechargeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CryptoChain = _field
	return nil
}
func (p *CryptoRechargeReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CryptoAddress = _field
	return nil
}

func (p *CryptoRechargeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CryptoRechargeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CryptoRechargeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CryptoRechargeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crypto_currency", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CryptoCurrency); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CryptoRechargeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crypto_chain", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CryptoChain); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CryptoRechargeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crypto_address", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CryptoAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CryptoRechargeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CryptoRechargeReq(%+v)", *p)

}

// 充值请求（在线支付）
type OnlineRechargeReq struct {
	// 充值金额（美元）
	Amount string `thrift:"amount,1,required" form:"amount,required" json:"amount,required"`
	// 支付平台：stripe, paypal
	Platform string `thrift:"platform,2,required" form:"platform,required" json:"platform,required"`
}

func NewOnlineRechargeReq() *OnlineRechargeReq {
	return &OnlineRechargeReq{}
}

func (p *OnlineRechargeReq) InitDefault() {
}

func (p *OnlineRechargeReq) GetAmount() (v string) {
	return p.Amount
}

func (p *OnlineRechargeReq) GetPlatform() (v string) {
	return p.Platform
}

var fieldIDToName_OnlineRechargeReq = map[int16]string{
	1: "amount",
	2: "platform",
}

func (p *OnlineRechargeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAmount bool = false
	var issetPlatform bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlatform = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPlatform {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnlineRechargeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OnlineRechargeReq[fieldId]))
}

func (p *OnlineRechargeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *OnlineRechargeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Platform = _field
	return nil
}

func (p *OnlineRechargeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OnlineRechargeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnlineRechargeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OnlineRechargeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("platform", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Platform); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OnlineRechargeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineRechargeReq(%+v)", *p)

}

// 充值响应
type RechargeResp struct {
	Transaction *Transaction `thrift:"transaction,1,optional" form:"transaction" json:"transaction,omitempty" query:"transaction"`
	// 在线支付的URL
	PaymentURL *string          `thrift:"payment_url,2,optional" form:"payment_url" json:"payment_url,omitempty" query:"payment_url"`
	BaseResp   *common.BaseResp `thrift:"base_resp,3" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewRechargeResp() *RechargeResp {
	return &RechargeResp{}
}

func (p *RechargeResp) InitDefault() {
}

var RechargeResp_Transaction_DEFAULT *Transaction

func (p *RechargeResp) GetTransaction() (v *Transaction) {
	if !p.IsSetTransaction() {
		return RechargeResp_Transaction_DEFAULT
	}
	return p.Transaction
}

var RechargeResp_PaymentURL_DEFAULT string

func (p *RechargeResp) GetPaymentURL() (v string) {
	if !p.IsSetPaymentURL() {
		return RechargeResp_PaymentURL_DEFAULT
	}
	return *p.PaymentURL
}

var RechargeResp_BaseResp_DEFAULT *common.BaseResp

func (p *RechargeResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return RechargeResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_RechargeResp = map[int16]string{
	1: "transaction",
	2: "payment_url",
	3: "base_resp",
}

func (p *RechargeResp) IsSetTransaction() bool {
	return p.Transaction != nil
}

func (p *RechargeResp) IsSetPaymentURL() bool {
	return p.PaymentURL != nil
}

func (p *RechargeResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RechargeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTransaction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Transaction = _field
	return nil
}
func (p *RechargeResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentURL = _field
	return nil
}
func (p *RechargeResp) ReadField3(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RechargeResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RechargeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransaction() {
		if err = oprot.WriteFieldBegin("transaction", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Transaction.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentURL() {
		if err = oprot.WriteFieldBegin("payment_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RechargeResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RechargeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeResp(%+v)", *p)

}

// 获取交易记录列表请求
type GetTransactionListReq struct {
	// 交易类型筛选
	Type *string `thrift:"type,1,optional" form:"type" json:"type,omitempty"`
	// 状态筛选
	Status   *string `thrift:"status,2,optional" form:"status" json:"status,omitempty"`
	Page     *int32  `thrift:"page,3,optional" form:"page" json:"page,omitempty"`
	PageSize *int32  `thrift:"page_size,4,optional" form:"page_size" json:"page_size,omitempty"`
}

func NewGetTransactionListReq() *GetTransactionListReq {
	return &GetTransactionListReq{}
}

func (p *GetTransactionListReq) InitDefault() {
}

var GetTransactionListReq_Type_DEFAULT string

func (p *GetTransactionListReq) GetType() (v string) {
	if !p.IsSetType() {
		return GetTransactionListReq_Type_DEFAULT
	}
	return *p.Type
}

var GetTransactionListReq_Status_DEFAULT string

func (p *GetTransactionListReq) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return GetTransactionListReq_Status_DEFAULT
	}
	return *p.Status
}

var GetTransactionListReq_Page_DEFAULT int32

func (p *GetTransactionListReq) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetTransactionListReq_Page_DEFAULT
	}
	return *p.Page
}

var GetTransactionListReq_PageSize_DEFAULT int32

func (p *GetTransactionListReq) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return GetTransactionListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var fieldIDToName_GetTransactionListReq = map[int16]string{
	1: "type",
	2: "status",
	3: "page",
	4: "page_size",
}

func (p *GetTransactionListReq) IsSetType() bool {
	return p.Type != nil
}

func (p *GetTransactionListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetTransactionListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetTransactionListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetTransactionListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTransactionListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTransactionListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *GetTransactionListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *GetTransactionListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *GetTransactionListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}

func (p *GetTransactionListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTransactionListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTransactionListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTransactionListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetTransactionListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetTransactionListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionListReq(%+v)", *p)

}

// 获取交易记录列表响应
type GetTransactionListResp struct {
	Transactions []*Transaction   `thrift:"transactions,1,default,list<Transaction>" form:"transactions" json:"transactions" query:"transactions"`
	Total        int64            `thrift:"total,2" form:"total" json:"total" query:"total"`
	Page         int32            `thrift:"page,3" form:"page" json:"page" query:"page"`
	PageSize     int32            `thrift:"page_size,4" form:"page_size" json:"page_size" query:"page_size"`
	BaseResp     *common.BaseResp `thrift:"base_resp,5" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewGetTransactionListResp() *GetTransactionListResp {
	return &GetTransactionListResp{}
}

func (p *GetTransactionListResp) InitDefault() {
}

func (p *GetTransactionListResp) GetTransactions() (v []*Transaction) {
	return p.Transactions
}

func (p *GetTransactionListResp) GetTotal() (v int64) {
	return p.Total
}

func (p *GetTransactionListResp) GetPage() (v int32) {
	return p.Page
}

func (p *GetTransactionListResp) GetPageSize() (v int32) {
	return p.PageSize
}

var GetTransactionListResp_BaseResp_DEFAULT *common.BaseResp

func (p *GetTransactionListResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetTransactionListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_GetTransactionListResp = map[int16]string{
	1: "transactions",
	2: "total",
	3: "page",
	4: "page_size",
	5: "base_resp",
}

func (p *GetTransactionListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTransactionListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTransactionListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTransactionListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Transaction, 0, size)
	values := make([]Transaction, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Transactions = _field
	return nil
}
func (p *GetTransactionListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}
func (p *GetTransactionListResp) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *GetTransactionListResp) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *GetTransactionListResp) ReadField5(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTransactionListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTransactionListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transactions", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Transactions)); err != nil {
		return err
	}
	for _, v := range p.Transactions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTransactionListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTransactionListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetTransactionListResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetTransactionListResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetTransactionListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionListResp(%+v)", *p)

}

// 获取交易详情请求
type GetTransactionDetailReq struct {
	TransactionID string `thrift:"transaction_id,1,required" json:"transaction_id,required" path:"transaction_id,required"`
}

func NewGetTransactionDetailReq() *GetTransactionDetailReq {
	return &GetTransactionDetailReq{}
}

func (p *GetTransactionDetailReq) InitDefault() {
}

func (p *GetTransactionDetailReq) GetTransactionID() (v string) {
	return p.TransactionID
}

var fieldIDToName_GetTransactionDetailReq = map[int16]string{
	1: "transaction_id",
}

func (p *GetTransactionDetailReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransactionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTransactionDetailReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTransactionDetailReq[fieldId]))
}

func (p *GetTransactionDetailReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionID = _field
	return nil
}

func (p *GetTransactionDetailReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionDetailReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTransactionDetailReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransactionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTransactionDetailReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionDetailReq(%+v)", *p)

}

// 获取交易详情响应
type GetTransactionDetailResp struct {
	Transaction *Transaction     `thrift:"transaction,1,optional" form:"transaction" json:"transaction,omitempty" query:"transaction"`
	BaseResp    *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewGetTransactionDetailResp() *GetTransactionDetailResp {
	return &GetTransactionDetailResp{}
}

func (p *GetTransactionDetailResp) InitDefault() {
}

var GetTransactionDetailResp_Transaction_DEFAULT *Transaction

func (p *GetTransactionDetailResp) GetTransaction() (v *Transaction) {
	if !p.IsSetTransaction() {
		return GetTransactionDetailResp_Transaction_DEFAULT
	}
	return p.Transaction
}

var GetTransactionDetailResp_BaseResp_DEFAULT *common.BaseResp

func (p *GetTransactionDetailResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetTransactionDetailResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_GetTransactionDetailResp = map[int16]string{
	1: "transaction",
	2: "base_resp",
}

func (p *GetTransactionDetailResp) IsSetTransaction() bool {
	return p.Transaction != nil
}

func (p *GetTransactionDetailResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTransactionDetailResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTransactionDetailResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTransactionDetailResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTransaction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Transaction = _field
	return nil
}
func (p *GetTransactionDetailResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTransactionDetailResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionDetailResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTransactionDetailResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransaction() {
		if err = oprot.WriteFieldBegin("transaction", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Transaction.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTransactionDetailResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTransactionDetailResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionDetailResp(%+v)", *p)

}

// 确认加密货币充值请求（用户提交交易哈希后调用）
type ConfirmCryptoRechargeReq struct {
	TransactionID string `thrift:"transaction_id,1,required" form:"transaction_id,required" json:"transaction_id,required"`
	// 加密货币交易哈希
	CryptoTxHash string `thrift:"crypto_tx_hash,2,required" form:"crypto_tx_hash,required" json:"crypto_tx_hash,required"`
}

func NewConfirmCryptoRechargeReq() *ConfirmCryptoRechargeReq {
	return &ConfirmCryptoRechargeReq{}
}

func (p *ConfirmCryptoRechargeReq) InitDefault() {
}

func (p *ConfirmCryptoRechargeReq) GetTransactionID() (v string) {
	return p.TransactionID
}

func (p *ConfirmCryptoRechargeReq) GetCryptoTxHash() (v string) {
	return p.CryptoTxHash
}

var fieldIDToName_ConfirmCryptoRechargeReq = map[int16]string{
	1: "transaction_id",
	2: "crypto_tx_hash",
}

func (p *ConfirmCryptoRechargeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionID bool = false
	var issetCryptoTxHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransactionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCryptoTxHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCryptoTxHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ConfirmCryptoRechargeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ConfirmCryptoRechargeReq[fieldId]))
}

func (p *ConfirmCryptoRechargeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionID = _field
	return nil
}
func (p *ConfirmCryptoRechargeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CryptoTxHash = _field
	return nil
}

func (p *ConfirmCryptoRechargeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmCryptoRechargeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ConfirmCryptoRechargeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransactionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ConfirmCryptoRechargeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crypto_tx_hash", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CryptoTxHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ConfirmCryptoRechargeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmCryptoRechargeReq(%+v)", *p)

}

// 确认加密货币充值响应
type ConfirmCryptoRechargeResp struct {
	Transaction *Transaction     `thrift:"transaction,1,optional" form:"transaction" json:"transaction,omitempty" query:"transaction"`
	BaseResp    *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewConfirmCryptoRechargeResp() *ConfirmCryptoRechargeResp {
	return &ConfirmCryptoRechargeResp{}
}

func (p *ConfirmCryptoRechargeResp) InitDefault() {
}

var ConfirmCryptoRechargeResp_Transaction_DEFAULT *Transaction

func (p *ConfirmCryptoRechargeResp) GetTransaction() (v *Transaction) {
	if !p.IsSetTransaction() {
		return ConfirmCryptoRechargeResp_Transaction_DEFAULT
	}
	return p.Transaction
}

var ConfirmCryptoRechargeResp_BaseResp_DEFAULT *common.BaseResp

func (p *ConfirmCryptoRechargeResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return ConfirmCryptoRechargeResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_ConfirmCryptoRechargeResp = map[int16]string{
	1: "transaction",
	2: "base_resp",
}

func (p *ConfirmCryptoRechargeResp) IsSetTransaction() bool {
	return p.Transaction != nil
}

func (p *ConfirmCryptoRechargeResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ConfirmCryptoRechargeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ConfirmCryptoRechargeResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ConfirmCryptoRechargeResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTransaction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Transaction = _field
	return nil
}
func (p *ConfirmCryptoRechargeResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ConfirmCryptoRechargeResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmCryptoRechargeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ConfirmCryptoRechargeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransaction() {
		if err = oprot.WriteFieldBegin("transaction", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Transaction.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ConfirmCryptoRechargeResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ConfirmCryptoRechargeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmCryptoRechargeResp(%+v)", *p)

}

// 钱包服务
type WalletService interface {
	GetWalletInfo(ctx context.Context, req *GetWalletInfoReq) (r *GetWalletInfoResp, err error)

	CryptoRecharge(ctx context.Context, req *CryptoRechargeReq) (r *RechargeResp, err error)

	OnlineRecharge(ctx context.Context, req *OnlineRechargeReq) (r *RechargeResp, err error)

	ConfirmCryptoRecharge(ctx context.Context, req *ConfirmCryptoRechargeReq) (r *ConfirmCryptoRechargeResp, err error)

	GetTransactionList(ctx context.Context, req *GetTransactionListReq) (r *GetTransactionListResp, err error)

	GetTransactionDetail(ctx context.Context, req *GetTransactionDetailReq) (r *GetTransactionDetailResp, err error)
}

type WalletServiceClient struct {
	c thrift.TClient
}

func NewWalletServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WalletServiceClient {
	return &WalletServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewWalletServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WalletServiceClient {
	return &WalletServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewWalletServiceClient(c thrift.TClient) *WalletServiceClient {
	return &WalletServiceClient{
		c: c,
	}
}

func (p *WalletServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *WalletServiceClient) GetWalletInfo(ctx context.Context, req *GetWalletInfoReq) (r *GetWalletInfoResp, err error) {
	var _args WalletServiceGetWalletInfoArgs
	_args.Req = req
	var _result WalletServiceGetWalletInfoResult
	if err = p.Client_().Call(ctx, "GetWalletInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WalletServiceClient) CryptoRecharge(ctx context.Context, req *CryptoRechargeReq) (r *RechargeResp, err error) {
	var _args WalletServiceCryptoRechargeArgs
	_args.Req = req
	var _result WalletServiceCryptoRechargeResult
	if err = p.Client_().Call(ctx, "CryptoRecharge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WalletServiceClient) OnlineRecharge(ctx context.Context, req *OnlineRechargeReq) (r *RechargeResp, err error) {
	var _args WalletServiceOnlineRechargeArgs
	_args.Req = req
	var _result WalletServiceOnlineRechargeResult
	if err = p.Client_().Call(ctx, "OnlineRecharge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WalletServiceClient) ConfirmCryptoRecharge(ctx context.Context, req *ConfirmCryptoRechargeReq) (r *ConfirmCryptoRechargeResp, err error) {
	var _args WalletServiceConfirmCryptoRechargeArgs
	_args.Req = req
	var _result WalletServiceConfirmCryptoRechargeResult
	if err = p.Client_().Call(ctx, "ConfirmCryptoRecharge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WalletServiceClient) GetTransactionList(ctx context.Context, req *GetTransactionListReq) (r *GetTransactionListResp, err error) {
	var _args WalletServiceGetTransactionListArgs
	_args.Req = req
	var _result WalletServiceGetTransactionListResult
	if err = p.Client_().Call(ctx, "GetTransactionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WalletServiceClient) GetTransactionDetail(ctx context.Context, req *GetTransactionDetailReq) (r *GetTransactionDetailResp, err error) {
	var _args WalletServiceGetTransactionDetailArgs
	_args.Req = req
	var _result WalletServiceGetTransactionDetailResult
	if err = p.Client_().Call(ctx, "GetTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type WalletServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      WalletService
}

func (p *WalletServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *WalletServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *WalletServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewWalletServiceProcessor(handler WalletService) *WalletServiceProcessor {
	self := &WalletServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetWalletInfo", &walletServiceProcessorGetWalletInfo{handler: handler})
	self.AddToProcessorMap("CryptoRecharge", &walletServiceProcessorCryptoRecharge{handler: handler})
	self.AddToProcessorMap("OnlineRecharge", &walletServiceProcessorOnlineRecharge{handler: handler})
	self.AddToProcessorMap("ConfirmCryptoRecharge", &walletServiceProcessorConfirmCryptoRecharge{handler: handler})
	self.AddToProcessorMap("GetTransactionList", &walletServiceProcessorGetTransactionList{handler: handler})
	self.AddToProcessorMap("GetTransactionDetail", &walletServiceProcessorGetTransactionDetail{handler: handler})
	return self
}
func (p *WalletServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type walletServiceProcessorGetWalletInfo struct {
	handler WalletService
}

func (p *walletServiceProcessorGetWalletInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceGetWalletInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWalletInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceGetWalletInfoResult{}
	var retval *GetWalletInfoResp
	if retval, err2 = p.handler.GetWalletInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWalletInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetWalletInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWalletInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type walletServiceProcessorCryptoRecharge struct {
	handler WalletService
}

func (p *walletServiceProcessorCryptoRecharge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceCryptoRechargeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CryptoRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceCryptoRechargeResult{}
	var retval *RechargeResp
	if retval, err2 = p.handler.CryptoRecharge(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CryptoRecharge: "+err2.Error())
		oprot.WriteMessageBegin("CryptoRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CryptoRecharge", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type walletServiceProcessorOnlineRecharge struct {
	handler WalletService
}

func (p *walletServiceProcessorOnlineRecharge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceOnlineRechargeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OnlineRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceOnlineRechargeResult{}
	var retval *RechargeResp
	if retval, err2 = p.handler.OnlineRecharge(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnlineRecharge: "+err2.Error())
		oprot.WriteMessageBegin("OnlineRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OnlineRecharge", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type walletServiceProcessorConfirmCryptoRecharge struct {
	handler WalletService
}

func (p *walletServiceProcessorConfirmCryptoRecharge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceConfirmCryptoRechargeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ConfirmCryptoRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceConfirmCryptoRechargeResult{}
	var retval *ConfirmCryptoRechargeResp
	if retval, err2 = p.handler.ConfirmCryptoRecharge(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ConfirmCryptoRecharge: "+err2.Error())
		oprot.WriteMessageBegin("ConfirmCryptoRecharge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ConfirmCryptoRecharge", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type walletServiceProcessorGetTransactionList struct {
	handler WalletService
}

func (p *walletServiceProcessorGetTransactionList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceGetTransactionListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTransactionList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceGetTransactionListResult{}
	var retval *GetTransactionListResp
	if retval, err2 = p.handler.GetTransactionList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTransactionList: "+err2.Error())
		oprot.WriteMessageBegin("GetTransactionList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTransactionList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type walletServiceProcessorGetTransactionDetail struct {
	handler WalletService
}

func (p *walletServiceProcessorGetTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WalletServiceGetTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WalletServiceGetTransactionDetailResult{}
	var retval *GetTransactionDetailResp
	if retval, err2 = p.handler.GetTransactionDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type WalletServiceGetWalletInfoArgs struct {
	Req *GetWalletInfoReq `thrift:"req,1"`
}

func NewWalletServiceGetWalletInfoArgs() *WalletServiceGetWalletInfoArgs {
	return &WalletServiceGetWalletInfoArgs{}
}

func (p *WalletServiceGetWalletInfoArgs) InitDefault() {
}

var WalletServiceGetWalletInfoArgs_Req_DEFAULT *GetWalletInfoReq

func (p *WalletServiceGetWalletInfoArgs) GetReq() (v *GetWalletInfoReq) {
	if !p.IsSetReq() {
		return WalletServiceGetWalletInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceGetWalletInfoArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceGetWalletInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceGetWalletInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetWalletInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetWalletInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceGetWalletInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWalletInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetWalletInfoArgs(%+v)", *p)

}

type WalletServiceGetWalletInfoResult struct {
	Success *GetWalletInfoResp `thrift:"success,0,optional"`
}

func NewWalletServiceGetWalletInfoResult() *WalletServiceGetWalletInfoResult {
	return &WalletServiceGetWalletInfoResult{}
}

func (p *WalletServiceGetWalletInfoResult) InitDefault() {
}

var WalletServiceGetWalletInfoResult_Success_DEFAULT *GetWalletInfoResp

func (p *WalletServiceGetWalletInfoResult) GetSuccess() (v *GetWalletInfoResp) {
	if !p.IsSetSuccess() {
		return WalletServiceGetWalletInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceGetWalletInfoResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceGetWalletInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceGetWalletInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetWalletInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetWalletInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceGetWalletInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWalletInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceGetWalletInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetWalletInfoResult(%+v)", *p)

}

type WalletServiceCryptoRechargeArgs struct {
	Req *CryptoRechargeReq `thrift:"req,1"`
}

func NewWalletServiceCryptoRechargeArgs() *WalletServiceCryptoRechargeArgs {
	return &WalletServiceCryptoRechargeArgs{}
}

func (p *WalletServiceCryptoRechargeArgs) InitDefault() {
}

var WalletServiceCryptoRechargeArgs_Req_DEFAULT *CryptoRechargeReq

func (p *WalletServiceCryptoRechargeArgs) GetReq() (v *CryptoRechargeReq) {
	if !p.IsSetReq() {
		return WalletServiceCryptoRechargeArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceCryptoRechargeArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceCryptoRechargeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceCryptoRechargeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceCryptoRechargeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCryptoRechargeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceCryptoRechargeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CryptoRecharge_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceCryptoRechargeArgs(%+v)", *p)

}

type WalletServiceCryptoRechargeResult struct {
	Success *RechargeResp `thrift:"success,0,optional"`
}

func NewWalletServiceCryptoRechargeResult() *WalletServiceCryptoRechargeResult {
	return &WalletServiceCryptoRechargeResult{}
}

func (p *WalletServiceCryptoRechargeResult) InitDefault() {
}

var WalletServiceCryptoRechargeResult_Success_DEFAULT *RechargeResp

func (p *WalletServiceCryptoRechargeResult) GetSuccess() (v *RechargeResp) {
	if !p.IsSetSuccess() {
		return WalletServiceCryptoRechargeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceCryptoRechargeResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceCryptoRechargeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceCryptoRechargeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceCryptoRechargeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRechargeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceCryptoRechargeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CryptoRecharge_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceCryptoRechargeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceCryptoRechargeResult(%+v)", *p)

}

type WalletServiceOnlineRechargeArgs struct {
	Req *OnlineRechargeReq `thrift:"req,1"`
}

func NewWalletServiceOnlineRechargeArgs() *WalletServiceOnlineRechargeArgs {
	return &WalletServiceOnlineRechargeArgs{}
}

func (p *WalletServiceOnlineRechargeArgs) InitDefault() {
}

var WalletServiceOnlineRechargeArgs_Req_DEFAULT *OnlineRechargeReq

func (p *WalletServiceOnlineRechargeArgs) GetReq() (v *OnlineRechargeReq) {
	if !p.IsSetReq() {
		return WalletServiceOnlineRechargeArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceOnlineRechargeArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceOnlineRechargeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceOnlineRechargeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceOnlineRechargeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewOnlineRechargeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceOnlineRechargeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OnlineRecharge_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceOnlineRechargeArgs(%+v)", *p)

}

type WalletServiceOnlineRechargeResult struct {
	Success *RechargeResp `thrift:"success,0,optional"`
}

func NewWalletServiceOnlineRechargeResult() *WalletServiceOnlineRechargeResult {
	return &WalletServiceOnlineRechargeResult{}
}

func (p *WalletServiceOnlineRechargeResult) InitDefault() {
}

var WalletServiceOnlineRechargeResult_Success_DEFAULT *RechargeResp

func (p *WalletServiceOnlineRechargeResult) GetSuccess() (v *RechargeResp) {
	if !p.IsSetSuccess() {
		return WalletServiceOnlineRechargeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceOnlineRechargeResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceOnlineRechargeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceOnlineRechargeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceOnlineRechargeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRechargeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceOnlineRechargeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OnlineRecharge_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceOnlineRechargeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceOnlineRechargeResult(%+v)", *p)

}

type WalletServiceConfirmCryptoRechargeArgs struct {
	Req *ConfirmCryptoRechargeReq `thrift:"req,1"`
}

func NewWalletServiceConfirmCryptoRechargeArgs() *WalletServiceConfirmCryptoRechargeArgs {
	return &WalletServiceConfirmCryptoRechargeArgs{}
}

func (p *WalletServiceConfirmCryptoRechargeArgs) InitDefault() {
}

var WalletServiceConfirmCryptoRechargeArgs_Req_DEFAULT *ConfirmCryptoRechargeReq

func (p *WalletServiceConfirmCryptoRechargeArgs) GetReq() (v *ConfirmCryptoRechargeReq) {
	if !p.IsSetReq() {
		return WalletServiceConfirmCryptoRechargeArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceConfirmCryptoRechargeArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceConfirmCryptoRechargeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceConfirmCryptoRechargeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceConfirmCryptoRechargeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewConfirmCryptoRechargeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceConfirmCryptoRechargeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmCryptoRecharge_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceConfirmCryptoRechargeArgs(%+v)", *p)

}

type WalletServiceConfirmCryptoRechargeResult struct {
	Success *ConfirmCryptoRechargeResp `thrift:"success,0,optional"`
}

func NewWalletServiceConfirmCryptoRechargeResult() *WalletServiceConfirmCryptoRechargeResult {
	return &WalletServiceConfirmCryptoRechargeResult{}
}

func (p *WalletServiceConfirmCryptoRechargeResult) InitDefault() {
}

var WalletServiceConfirmCryptoRechargeResult_Success_DEFAULT *ConfirmCryptoRechargeResp

func (p *WalletServiceConfirmCryptoRechargeResult) GetSuccess() (v *ConfirmCryptoRechargeResp) {
	if !p.IsSetSuccess() {
		return WalletServiceConfirmCryptoRechargeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceConfirmCryptoRechargeResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceConfirmCryptoRechargeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceConfirmCryptoRechargeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceConfirmCryptoRechargeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewConfirmCryptoRechargeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceConfirmCryptoRechargeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmCryptoRecharge_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceConfirmCryptoRechargeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceConfirmCryptoRechargeResult(%+v)", *p)

}

type WalletServiceGetTransactionListArgs struct {
	Req *GetTransactionListReq `thrift:"req,1"`
}

func NewWalletServiceGetTransactionListArgs() *WalletServiceGetTransactionListArgs {
	return &WalletServiceGetTransactionListArgs{}
}

func (p *WalletServiceGetTransactionListArgs) InitDefault() {
}

var WalletServiceGetTransactionListArgs_Req_DEFAULT *GetTransactionListReq

func (p *WalletServiceGetTransactionListArgs) GetReq() (v *GetTransactionListReq) {
	if !p.IsSetReq() {
		return WalletServiceGetTransactionListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceGetTransactionListArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceGetTransactionListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceGetTransactionListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetTransactionListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTransactionListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceGetTransactionListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceGetTransactionListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetTransactionListArgs(%+v)", *p)

}

type WalletServiceGetTransactionListResult struct {
	Success *GetTransactionListResp `thrift:"success,0,optional"`
}

func NewWalletServiceGetTransactionListResult() *WalletServiceGetTransactionListResult {
	return &WalletServiceGetTransactionListResult{}
}

func (p *WalletServiceGetTransactionListResult) InitDefault() {
}

var WalletServiceGetTransactionListResult_Success_DEFAULT *GetTransactionListResp

func (p *WalletServiceGetTransactionListResult) GetSuccess() (v *GetTransactionListResp) {
	if !p.IsSetSuccess() {
		return WalletServiceGetTransactionListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceGetTransactionListResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceGetTransactionListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceGetTransactionListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetTransactionListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTransactionListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceGetTransactionListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceGetTransactionListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetTransactionListResult(%+v)", *p)

}

type WalletServiceGetTransactionDetailArgs struct {
	Req *GetTransactionDetailReq `thrift:"req,1"`
}

func NewWalletServiceGetTransactionDetailArgs() *WalletServiceGetTransactionDetailArgs {
	return &WalletServiceGetTransactionDetailArgs{}
}

func (p *WalletServiceGetTransactionDetailArgs) InitDefault() {
}

var WalletServiceGetTransactionDetailArgs_Req_DEFAULT *GetTransactionDetailReq

func (p *WalletServiceGetTransactionDetailArgs) GetReq() (v *GetTransactionDetailReq) {
	if !p.IsSetReq() {
		return WalletServiceGetTransactionDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_WalletServiceGetTransactionDetailArgs = map[int16]string{
	1: "req",
}

func (p *WalletServiceGetTransactionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WalletServiceGetTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTransactionDetailReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *WalletServiceGetTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetTransactionDetailArgs(%+v)", *p)

}

type WalletServiceGetTransactionDetailResult struct {
	Success *GetTransactionDetailResp `thrift:"success,0,optional"`
}

func NewWalletServiceGetTransactionDetailResult() *WalletServiceGetTransactionDetailResult {
	return &WalletServiceGetTransactionDetailResult{}
}

func (p *WalletServiceGetTransactionDetailResult) InitDefault() {
}

var WalletServiceGetTransactionDetailResult_Success_DEFAULT *GetTransactionDetailResp

func (p *WalletServiceGetTransactionDetailResult) GetSuccess() (v *GetTransactionDetailResp) {
	if !p.IsSetSuccess() {
		return WalletServiceGetTransactionDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_WalletServiceGetTransactionDetailResult = map[int16]string{
	0: "success",
}

func (p *WalletServiceGetTransactionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WalletServiceGetTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WalletServiceGetTransactionDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTransactionDetailResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *WalletServiceGetTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WalletServiceGetTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WalletServiceGetTransactionDetailResult(%+v)", *p)

}
