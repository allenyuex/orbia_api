// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package recharge_order

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"orbia_api/biz/model/common"
)

// 支付类型枚举
type PaymentType int64

const (
	// 加密货币
	PaymentType_CRYPTO PaymentType = 1
	// 在线支付
	PaymentType_ONLINE PaymentType = 2
)

func (p PaymentType) String() string {
	switch p {
	case PaymentType_CRYPTO:
		return "CRYPTO"
	case PaymentType_ONLINE:
		return "ONLINE"
	}
	return "<UNSET>"
}

func PaymentTypeFromString(s string) (PaymentType, error) {
	switch s {
	case "CRYPTO":
		return PaymentType_CRYPTO, nil
	case "ONLINE":
		return PaymentType_ONLINE, nil
	}
	return PaymentType(0), fmt.Errorf("not a valid PaymentType string")
}

func PaymentTypePtr(v PaymentType) *PaymentType { return &v }
func (p *PaymentType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PaymentType(result.Int64)
	return
}

func (p *PaymentType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 充值订单状态枚举
type RechargeOrderStatus int64

const (
	// 待确认
	RechargeOrderStatus_PENDING RechargeOrderStatus = 1
	// 已确认
	RechargeOrderStatus_CONFIRMED RechargeOrderStatus = 2
	// 失败
	RechargeOrderStatus_FAILED RechargeOrderStatus = 3
	// 已取消
	RechargeOrderStatus_CANCELLED RechargeOrderStatus = 4
)

func (p RechargeOrderStatus) String() string {
	switch p {
	case RechargeOrderStatus_PENDING:
		return "PENDING"
	case RechargeOrderStatus_CONFIRMED:
		return "CONFIRMED"
	case RechargeOrderStatus_FAILED:
		return "FAILED"
	case RechargeOrderStatus_CANCELLED:
		return "CANCELLED"
	}
	return "<UNSET>"
}

func RechargeOrderStatusFromString(s string) (RechargeOrderStatus, error) {
	switch s {
	case "PENDING":
		return RechargeOrderStatus_PENDING, nil
	case "CONFIRMED":
		return RechargeOrderStatus_CONFIRMED, nil
	case "FAILED":
		return RechargeOrderStatus_FAILED, nil
	case "CANCELLED":
		return RechargeOrderStatus_CANCELLED, nil
	}
	return RechargeOrderStatus(0), fmt.Errorf("not a valid RechargeOrderStatus string")
}

func RechargeOrderStatusPtr(v RechargeOrderStatus) *RechargeOrderStatus { return &v }
func (p *RechargeOrderStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = RechargeOrderStatus(result.Int64)
	return
}

func (p *RechargeOrderStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 充值订单信息
type RechargeOrder struct {
	ID      int64  `thrift:"id,1" form:"id" json:"id" query:"id"`
	OrderID string `thrift:"order_id,2" form:"order_id" json:"order_id" query:"order_id"`
	UserID  int64  `thrift:"user_id,3" form:"user_id" json:"user_id" query:"user_id"`
	// 充值金额（美元）
	Amount string `thrift:"amount,4" form:"amount" json:"amount" query:"amount"`
	// PaymentType转字符串：crypto, online
	PaymentType      string `thrift:"payment_type,5" form:"payment_type" json:"payment_type" query:"payment_type"`
	PaymentSettingID *int64 `thrift:"payment_setting_id,6,optional" form:"payment_setting_id" json:"payment_setting_id,omitempty" query:"payment_setting_id"`
	// 快照-区块链网络
	PaymentNetwork *string `thrift:"payment_network,7,optional" form:"payment_network" json:"payment_network,omitempty" query:"payment_network"`
	// 快照-钱包地址
	PaymentAddress *string `thrift:"payment_address,8,optional" form:"payment_address" json:"payment_address,omitempty" query:"payment_address"`
	// 快照-钱包标签
	PaymentLabel *string `thrift:"payment_label,9,optional" form:"payment_label" json:"payment_label,omitempty" query:"payment_label"`
	// 用户的转账钱包地址
	UserCryptoAddress *string `thrift:"user_crypto_address,10,optional" form:"user_crypto_address" json:"user_crypto_address,omitempty" query:"user_crypto_address"`
	// 加密货币交易哈希
	CryptoTxHash *string `thrift:"crypto_tx_hash,11,optional" form:"crypto_tx_hash" json:"crypto_tx_hash,omitempty" query:"crypto_tx_hash"`
	// 在线支付平台：stripe, paypal
	OnlinePaymentPlatform *string `thrift:"online_payment_platform,12,optional" form:"online_payment_platform" json:"online_payment_platform,omitempty" query:"online_payment_platform"`
	// 在线支付平台订单ID
	OnlinePaymentOrderID *string `thrift:"online_payment_order_id,13,optional" form:"online_payment_order_id" json:"online_payment_order_id,omitempty" query:"online_payment_order_id"`
	// 在线支付URL
	OnlinePaymentURL *string `thrift:"online_payment_url,14,optional" form:"online_payment_url" json:"online_payment_url,omitempty" query:"online_payment_url"`
	// RechargeOrderStatus转字符串：pending, confirmed, failed, cancelled
	Status string `thrift:"status,15" form:"status" json:"status" query:"status"`
	// 确认人ID（管理员）
	ConfirmedBy *int64 `thrift:"confirmed_by,16,optional" form:"confirmed_by" json:"confirmed_by,omitempty" query:"confirmed_by"`
	// 确认时间
	ConfirmedAt *string `thrift:"confirmed_at,17,optional" form:"confirmed_at" json:"confirmed_at,omitempty" query:"confirmed_at"`
	// 失败原因
	FailedReason *string `thrift:"failed_reason,18,optional" form:"failed_reason" json:"failed_reason,omitempty" query:"failed_reason"`
	// 备注
	Remark    *string `thrift:"remark,19,optional" form:"remark" json:"remark,omitempty" query:"remark"`
	CreatedAt string  `thrift:"created_at,20" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt string  `thrift:"updated_at,21" form:"updated_at" json:"updated_at" query:"updated_at"`
}

func NewRechargeOrder() *RechargeOrder {
	return &RechargeOrder{}
}

func (p *RechargeOrder) InitDefault() {
}

func (p *RechargeOrder) GetID() (v int64) {
	return p.ID
}

func (p *RechargeOrder) GetOrderID() (v string) {
	return p.OrderID
}

func (p *RechargeOrder) GetUserID() (v int64) {
	return p.UserID
}

func (p *RechargeOrder) GetAmount() (v string) {
	return p.Amount
}

func (p *RechargeOrder) GetPaymentType() (v string) {
	return p.PaymentType
}

var RechargeOrder_PaymentSettingID_DEFAULT int64

func (p *RechargeOrder) GetPaymentSettingID() (v int64) {
	if !p.IsSetPaymentSettingID() {
		return RechargeOrder_PaymentSettingID_DEFAULT
	}
	return *p.PaymentSettingID
}

var RechargeOrder_PaymentNetwork_DEFAULT string

func (p *RechargeOrder) GetPaymentNetwork() (v string) {
	if !p.IsSetPaymentNetwork() {
		return RechargeOrder_PaymentNetwork_DEFAULT
	}
	return *p.PaymentNetwork
}

var RechargeOrder_PaymentAddress_DEFAULT string

func (p *RechargeOrder) GetPaymentAddress() (v string) {
	if !p.IsSetPaymentAddress() {
		return RechargeOrder_PaymentAddress_DEFAULT
	}
	return *p.PaymentAddress
}

var RechargeOrder_PaymentLabel_DEFAULT string

func (p *RechargeOrder) GetPaymentLabel() (v string) {
	if !p.IsSetPaymentLabel() {
		return RechargeOrder_PaymentLabel_DEFAULT
	}
	return *p.PaymentLabel
}

var RechargeOrder_UserCryptoAddress_DEFAULT string

func (p *RechargeOrder) GetUserCryptoAddress() (v string) {
	if !p.IsSetUserCryptoAddress() {
		return RechargeOrder_UserCryptoAddress_DEFAULT
	}
	return *p.UserCryptoAddress
}

var RechargeOrder_CryptoTxHash_DEFAULT string

func (p *RechargeOrder) GetCryptoTxHash() (v string) {
	if !p.IsSetCryptoTxHash() {
		return RechargeOrder_CryptoTxHash_DEFAULT
	}
	return *p.CryptoTxHash
}

var RechargeOrder_OnlinePaymentPlatform_DEFAULT string

func (p *RechargeOrder) GetOnlinePaymentPlatform() (v string) {
	if !p.IsSetOnlinePaymentPlatform() {
		return RechargeOrder_OnlinePaymentPlatform_DEFAULT
	}
	return *p.OnlinePaymentPlatform
}

var RechargeOrder_OnlinePaymentOrderID_DEFAULT string

func (p *RechargeOrder) GetOnlinePaymentOrderID() (v string) {
	if !p.IsSetOnlinePaymentOrderID() {
		return RechargeOrder_OnlinePaymentOrderID_DEFAULT
	}
	return *p.OnlinePaymentOrderID
}

var RechargeOrder_OnlinePaymentURL_DEFAULT string

func (p *RechargeOrder) GetOnlinePaymentURL() (v string) {
	if !p.IsSetOnlinePaymentURL() {
		return RechargeOrder_OnlinePaymentURL_DEFAULT
	}
	return *p.OnlinePaymentURL
}

func (p *RechargeOrder) GetStatus() (v string) {
	return p.Status
}

var RechargeOrder_ConfirmedBy_DEFAULT int64

func (p *RechargeOrder) GetConfirmedBy() (v int64) {
	if !p.IsSetConfirmedBy() {
		return RechargeOrder_ConfirmedBy_DEFAULT
	}
	return *p.ConfirmedBy
}

var RechargeOrder_ConfirmedAt_DEFAULT string

func (p *RechargeOrder) GetConfirmedAt() (v string) {
	if !p.IsSetConfirmedAt() {
		return RechargeOrder_ConfirmedAt_DEFAULT
	}
	return *p.ConfirmedAt
}

var RechargeOrder_FailedReason_DEFAULT string

func (p *RechargeOrder) GetFailedReason() (v string) {
	if !p.IsSetFailedReason() {
		return RechargeOrder_FailedReason_DEFAULT
	}
	return *p.FailedReason
}

var RechargeOrder_Remark_DEFAULT string

func (p *RechargeOrder) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return RechargeOrder_Remark_DEFAULT
	}
	return *p.Remark
}

func (p *RechargeOrder) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *RechargeOrder) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

var fieldIDToName_RechargeOrder = map[int16]string{
	1:  "id",
	2:  "order_id",
	3:  "user_id",
	4:  "amount",
	5:  "payment_type",
	6:  "payment_setting_id",
	7:  "payment_network",
	8:  "payment_address",
	9:  "payment_label",
	10: "user_crypto_address",
	11: "crypto_tx_hash",
	12: "online_payment_platform",
	13: "online_payment_order_id",
	14: "online_payment_url",
	15: "status",
	16: "confirmed_by",
	17: "confirmed_at",
	18: "failed_reason",
	19: "remark",
	20: "created_at",
	21: "updated_at",
}

func (p *RechargeOrder) IsSetPaymentSettingID() bool {
	return p.PaymentSettingID != nil
}

func (p *RechargeOrder) IsSetPaymentNetwork() bool {
	return p.PaymentNetwork != nil
}

func (p *RechargeOrder) IsSetPaymentAddress() bool {
	return p.PaymentAddress != nil
}

func (p *RechargeOrder) IsSetPaymentLabel() bool {
	return p.PaymentLabel != nil
}

func (p *RechargeOrder) IsSetUserCryptoAddress() bool {
	return p.UserCryptoAddress != nil
}

func (p *RechargeOrder) IsSetCryptoTxHash() bool {
	return p.CryptoTxHash != nil
}

func (p *RechargeOrder) IsSetOnlinePaymentPlatform() bool {
	return p.OnlinePaymentPlatform != nil
}

func (p *RechargeOrder) IsSetOnlinePaymentOrderID() bool {
	return p.OnlinePaymentOrderID != nil
}

func (p *RechargeOrder) IsSetOnlinePaymentURL() bool {
	return p.OnlinePaymentURL != nil
}

func (p *RechargeOrder) IsSetConfirmedBy() bool {
	return p.ConfirmedBy != nil
}

func (p *RechargeOrder) IsSetConfirmedAt() bool {
	return p.ConfirmedAt != nil
}

func (p *RechargeOrder) IsSetFailedReason() bool {
	return p.FailedReason != nil
}

func (p *RechargeOrder) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *RechargeOrder) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrder[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrder) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *RechargeOrder) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderID = _field
	return nil
}
func (p *RechargeOrder) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserID = _field
	return nil
}
func (p *RechargeOrder) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *RechargeOrder) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PaymentType = _field
	return nil
}
func (p *RechargeOrder) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentSettingID = _field
	return nil
}
func (p *RechargeOrder) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentNetwork = _field
	return nil
}
func (p *RechargeOrder) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentAddress = _field
	return nil
}
func (p *RechargeOrder) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentLabel = _field
	return nil
}
func (p *RechargeOrder) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserCryptoAddress = _field
	return nil
}
func (p *RechargeOrder) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoTxHash = _field
	return nil
}
func (p *RechargeOrder) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentPlatform = _field
	return nil
}
func (p *RechargeOrder) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentOrderID = _field
	return nil
}
func (p *RechargeOrder) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlinePaymentURL = _field
	return nil
}
func (p *RechargeOrder) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *RechargeOrder) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConfirmedBy = _field
	return nil
}
func (p *RechargeOrder) ReadField17(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConfirmedAt = _field
	return nil
}
func (p *RechargeOrder) ReadField18(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailedReason = _field
	return nil
}
func (p *RechargeOrder) ReadField19(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}
func (p *RechargeOrder) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *RechargeOrder) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *RechargeOrder) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RechargeOrder"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RechargeOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RechargeOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RechargeOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payment_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PaymentType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RechargeOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentSettingID() {
		if err = oprot.WriteFieldBegin("payment_setting_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PaymentSettingID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RechargeOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentNetwork() {
		if err = oprot.WriteFieldBegin("payment_network", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentNetwork); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *RechargeOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentAddress() {
		if err = oprot.WriteFieldBegin("payment_address", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentAddress); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *RechargeOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentLabel() {
		if err = oprot.WriteFieldBegin("payment_label", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentLabel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *RechargeOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserCryptoAddress() {
		if err = oprot.WriteFieldBegin("user_crypto_address", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserCryptoAddress); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *RechargeOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoTxHash() {
		if err = oprot.WriteFieldBegin("crypto_tx_hash", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoTxHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *RechargeOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentPlatform() {
		if err = oprot.WriteFieldBegin("online_payment_platform", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentPlatform); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *RechargeOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentOrderID() {
		if err = oprot.WriteFieldBegin("online_payment_order_id", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentOrderID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *RechargeOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlinePaymentURL() {
		if err = oprot.WriteFieldBegin("online_payment_url", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OnlinePaymentURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *RechargeOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *RechargeOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfirmedBy() {
		if err = oprot.WriteFieldBegin("confirmed_by", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ConfirmedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *RechargeOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfirmedAt() {
		if err = oprot.WriteFieldBegin("confirmed_at", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConfirmedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *RechargeOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedReason() {
		if err = oprot.WriteFieldBegin("failed_reason", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FailedReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *RechargeOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *RechargeOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *RechargeOrder) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *RechargeOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrder(%+v)", *p)

}

// 创建充值订单请求（加密货币）
type CreateCryptoRechargeOrderReq struct {
	// 充值金额（美元）
	Amount string `thrift:"amount,1,required" form:"amount,required" json:"amount,required"`
	// 选择的收款钱包ID
	PaymentSettingID int64 `thrift:"payment_setting_id,2,required" form:"payment_setting_id,required" json:"payment_setting_id,required"`
	// 用户的转账钱包地址
	UserCryptoAddress string `thrift:"user_crypto_address,3,required" form:"user_crypto_address,required" json:"user_crypto_address,required"`
	// 加密货币交易哈希（可选）
	CryptoTxHash *string `thrift:"crypto_tx_hash,4,optional" form:"crypto_tx_hash" json:"crypto_tx_hash,omitempty"`
	// 备注
	Remark *string `thrift:"remark,5,optional" form:"remark" json:"remark,omitempty"`
}

func NewCreateCryptoRechargeOrderReq() *CreateCryptoRechargeOrderReq {
	return &CreateCryptoRechargeOrderReq{}
}

func (p *CreateCryptoRechargeOrderReq) InitDefault() {
}

func (p *CreateCryptoRechargeOrderReq) GetAmount() (v string) {
	return p.Amount
}

func (p *CreateCryptoRechargeOrderReq) GetPaymentSettingID() (v int64) {
	return p.PaymentSettingID
}

func (p *CreateCryptoRechargeOrderReq) GetUserCryptoAddress() (v string) {
	return p.UserCryptoAddress
}

var CreateCryptoRechargeOrderReq_CryptoTxHash_DEFAULT string

func (p *CreateCryptoRechargeOrderReq) GetCryptoTxHash() (v string) {
	if !p.IsSetCryptoTxHash() {
		return CreateCryptoRechargeOrderReq_CryptoTxHash_DEFAULT
	}
	return *p.CryptoTxHash
}

var CreateCryptoRechargeOrderReq_Remark_DEFAULT string

func (p *CreateCryptoRechargeOrderReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateCryptoRechargeOrderReq_Remark_DEFAULT
	}
	return *p.Remark
}

var fieldIDToName_CreateCryptoRechargeOrderReq = map[int16]string{
	1: "amount",
	2: "payment_setting_id",
	3: "user_crypto_address",
	4: "crypto_tx_hash",
	5: "remark",
}

func (p *CreateCryptoRechargeOrderReq) IsSetCryptoTxHash() bool {
	return p.CryptoTxHash != nil
}

func (p *CreateCryptoRechargeOrderReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *CreateCryptoRechargeOrderReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAmount bool = false
	var issetPaymentSettingID bool = false
	var issetUserCryptoAddress bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPaymentSettingID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserCryptoAddress = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPaymentSettingID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserCryptoAddress {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCryptoRechargeOrderReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCryptoRechargeOrderReq[fieldId]))
}

func (p *CreateCryptoRechargeOrderReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *CreateCryptoRechargeOrderReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PaymentSettingID = _field
	return nil
}
func (p *CreateCryptoRechargeOrderReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserCryptoAddress = _field
	return nil
}
func (p *CreateCryptoRechargeOrderReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoTxHash = _field
	return nil
}
func (p *CreateCryptoRechargeOrderReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}

func (p *CreateCryptoRechargeOrderReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCryptoRechargeOrderReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payment_setting_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PaymentSettingID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_crypto_address", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserCryptoAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoTxHash() {
		if err = oprot.WriteFieldBegin("crypto_tx_hash", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoTxHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateCryptoRechargeOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCryptoRechargeOrderReq(%+v)", *p)

}

// 创建充值订单响应
type CreateRechargeOrderResp struct {
	Order    *RechargeOrder   `thrift:"order,1,optional" form:"order" json:"order,omitempty" query:"order"`
	BaseResp *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewCreateRechargeOrderResp() *CreateRechargeOrderResp {
	return &CreateRechargeOrderResp{}
}

func (p *CreateRechargeOrderResp) InitDefault() {
}

var CreateRechargeOrderResp_Order_DEFAULT *RechargeOrder

func (p *CreateRechargeOrderResp) GetOrder() (v *RechargeOrder) {
	if !p.IsSetOrder() {
		return CreateRechargeOrderResp_Order_DEFAULT
	}
	return p.Order
}

var CreateRechargeOrderResp_BaseResp_DEFAULT *common.BaseResp

func (p *CreateRechargeOrderResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateRechargeOrderResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_CreateRechargeOrderResp = map[int16]string{
	1: "order",
	2: "base_resp",
}

func (p *CreateRechargeOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *CreateRechargeOrderResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateRechargeOrderResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateRechargeOrderResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateRechargeOrderResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRechargeOrder()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Order = _field
	return nil
}
func (p *CreateRechargeOrderResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateRechargeOrderResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRechargeOrderResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateRechargeOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Order.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateRechargeOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateRechargeOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRechargeOrderResp(%+v)", *p)

}

// 创建充值订单请求（在线支付）
type CreateOnlineRechargeOrderReq struct {
	// 充值金额（美元）
	Amount string `thrift:"amount,1,required" form:"amount,required" json:"amount,required"`
	// 支付平台：stripe, paypal
	Platform string `thrift:"platform,2,required" form:"platform,required" json:"platform,required"`
}

func NewCreateOnlineRechargeOrderReq() *CreateOnlineRechargeOrderReq {
	return &CreateOnlineRechargeOrderReq{}
}

func (p *CreateOnlineRechargeOrderReq) InitDefault() {
}

func (p *CreateOnlineRechargeOrderReq) GetAmount() (v string) {
	return p.Amount
}

func (p *CreateOnlineRechargeOrderReq) GetPlatform() (v string) {
	return p.Platform
}

var fieldIDToName_CreateOnlineRechargeOrderReq = map[int16]string{
	1: "amount",
	2: "platform",
}

func (p *CreateOnlineRechargeOrderReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAmount bool = false
	var issetPlatform bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlatform = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPlatform {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOnlineRechargeOrderReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateOnlineRechargeOrderReq[fieldId]))
}

func (p *CreateOnlineRechargeOrderReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *CreateOnlineRechargeOrderReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Platform = _field
	return nil
}

func (p *CreateOnlineRechargeOrderReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOnlineRechargeOrderReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOnlineRechargeOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOnlineRechargeOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("platform", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Platform); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOnlineRechargeOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOnlineRechargeOrderReq(%+v)", *p)

}

// 查询充值订单列表请求（normal用户）
type GetMyRechargeOrdersReq struct {
	// 状态筛选：pending, confirmed, failed, cancelled
	Status   *string `thrift:"status,1,optional" form:"status" json:"status,omitempty"`
	Page     *int32  `thrift:"page,2,optional" form:"page" json:"page,omitempty"`
	PageSize *int32  `thrift:"page_size,3,optional" form:"page_size" json:"page_size,omitempty"`
}

func NewGetMyRechargeOrdersReq() *GetMyRechargeOrdersReq {
	return &GetMyRechargeOrdersReq{}
}

func (p *GetMyRechargeOrdersReq) InitDefault() {
}

var GetMyRechargeOrdersReq_Status_DEFAULT string

func (p *GetMyRechargeOrdersReq) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return GetMyRechargeOrdersReq_Status_DEFAULT
	}
	return *p.Status
}

var GetMyRechargeOrdersReq_Page_DEFAULT int32

func (p *GetMyRechargeOrdersReq) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetMyRechargeOrdersReq_Page_DEFAULT
	}
	return *p.Page
}

var GetMyRechargeOrdersReq_PageSize_DEFAULT int32

func (p *GetMyRechargeOrdersReq) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return GetMyRechargeOrdersReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var fieldIDToName_GetMyRechargeOrdersReq = map[int16]string{
	1: "status",
	2: "page",
	3: "page_size",
}

func (p *GetMyRechargeOrdersReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetMyRechargeOrdersReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetMyRechargeOrdersReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetMyRechargeOrdersReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMyRechargeOrdersReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMyRechargeOrdersReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *GetMyRechargeOrdersReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *GetMyRechargeOrdersReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}

func (p *GetMyRechargeOrdersReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMyRechargeOrdersReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMyRechargeOrdersReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMyRechargeOrdersReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetMyRechargeOrdersReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetMyRechargeOrdersReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMyRechargeOrdersReq(%+v)", *p)

}

// 查询充值订单列表响应
type GetRechargeOrdersResp struct {
	Orders   []*RechargeOrder `thrift:"orders,1,default,list<RechargeOrder>" form:"orders" json:"orders" query:"orders"`
	Total    int64            `thrift:"total,2" form:"total" json:"total" query:"total"`
	Page     int32            `thrift:"page,3" form:"page" json:"page" query:"page"`
	PageSize int32            `thrift:"page_size,4" form:"page_size" json:"page_size" query:"page_size"`
	BaseResp *common.BaseResp `thrift:"base_resp,5" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewGetRechargeOrdersResp() *GetRechargeOrdersResp {
	return &GetRechargeOrdersResp{}
}

func (p *GetRechargeOrdersResp) InitDefault() {
}

func (p *GetRechargeOrdersResp) GetOrders() (v []*RechargeOrder) {
	return p.Orders
}

func (p *GetRechargeOrdersResp) GetTotal() (v int64) {
	return p.Total
}

func (p *GetRechargeOrdersResp) GetPage() (v int32) {
	return p.Page
}

func (p *GetRechargeOrdersResp) GetPageSize() (v int32) {
	return p.PageSize
}

var GetRechargeOrdersResp_BaseResp_DEFAULT *common.BaseResp

func (p *GetRechargeOrdersResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetRechargeOrdersResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_GetRechargeOrdersResp = map[int16]string{
	1: "orders",
	2: "total",
	3: "page",
	4: "page_size",
	5: "base_resp",
}

func (p *GetRechargeOrdersResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetRechargeOrdersResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRechargeOrdersResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetRechargeOrdersResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*RechargeOrder, 0, size)
	values := make([]RechargeOrder, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Orders = _field
	return nil
}
func (p *GetRechargeOrdersResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}
func (p *GetRechargeOrdersResp) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *GetRechargeOrdersResp) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *GetRechargeOrdersResp) ReadField5(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetRechargeOrdersResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRechargeOrdersResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRechargeOrdersResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orders", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Orders)); err != nil {
		return err
	}
	for _, v := range p.Orders {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRechargeOrdersResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetRechargeOrdersResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetRechargeOrdersResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetRechargeOrdersResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetRechargeOrdersResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRechargeOrdersResp(%+v)", *p)

}

// 查询所有充值订单列表请求（admin用户）
type GetAllRechargeOrdersReq struct {
	// 状态筛选
	Status *string `thrift:"status,1,optional" form:"status" json:"status,omitempty"`
	// 支付类型筛选：crypto, online
	PaymentType *string `thrift:"payment_type,2,optional" form:"payment_type" json:"payment_type,omitempty"`
	// 用户ID筛选
	UserID   *int64 `thrift:"user_id,3,optional" form:"user_id" json:"user_id,omitempty"`
	Page     *int32 `thrift:"page,4,optional" form:"page" json:"page,omitempty"`
	PageSize *int32 `thrift:"page_size,5,optional" form:"page_size" json:"page_size,omitempty"`
}

func NewGetAllRechargeOrdersReq() *GetAllRechargeOrdersReq {
	return &GetAllRechargeOrdersReq{}
}

func (p *GetAllRechargeOrdersReq) InitDefault() {
}

var GetAllRechargeOrdersReq_Status_DEFAULT string

func (p *GetAllRechargeOrdersReq) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return GetAllRechargeOrdersReq_Status_DEFAULT
	}
	return *p.Status
}

var GetAllRechargeOrdersReq_PaymentType_DEFAULT string

func (p *GetAllRechargeOrdersReq) GetPaymentType() (v string) {
	if !p.IsSetPaymentType() {
		return GetAllRechargeOrdersReq_PaymentType_DEFAULT
	}
	return *p.PaymentType
}

var GetAllRechargeOrdersReq_UserID_DEFAULT int64

func (p *GetAllRechargeOrdersReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return GetAllRechargeOrdersReq_UserID_DEFAULT
	}
	return *p.UserID
}

var GetAllRechargeOrdersReq_Page_DEFAULT int32

func (p *GetAllRechargeOrdersReq) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetAllRechargeOrdersReq_Page_DEFAULT
	}
	return *p.Page
}

var GetAllRechargeOrdersReq_PageSize_DEFAULT int32

func (p *GetAllRechargeOrdersReq) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return GetAllRechargeOrdersReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var fieldIDToName_GetAllRechargeOrdersReq = map[int16]string{
	1: "status",
	2: "payment_type",
	3: "user_id",
	4: "page",
	5: "page_size",
}

func (p *GetAllRechargeOrdersReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetAllRechargeOrdersReq) IsSetPaymentType() bool {
	return p.PaymentType != nil
}

func (p *GetAllRechargeOrdersReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GetAllRechargeOrdersReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetAllRechargeOrdersReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetAllRechargeOrdersReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAllRechargeOrdersReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *GetAllRechargeOrdersReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaymentType = _field
	return nil
}
func (p *GetAllRechargeOrdersReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *GetAllRechargeOrdersReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *GetAllRechargeOrdersReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}

func (p *GetAllRechargeOrdersReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllRechargeOrdersReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaymentType() {
		if err = oprot.WriteFieldBegin("payment_type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaymentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetAllRechargeOrdersReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllRechargeOrdersReq(%+v)", *p)

}

// 查询充值订单详情请求
type GetRechargeOrderDetailReq struct {
	OrderID string `thrift:"order_id,1,required" json:"order_id,required" path:"order_id,required"`
}

func NewGetRechargeOrderDetailReq() *GetRechargeOrderDetailReq {
	return &GetRechargeOrderDetailReq{}
}

func (p *GetRechargeOrderDetailReq) InitDefault() {
}

func (p *GetRechargeOrderDetailReq) GetOrderID() (v string) {
	return p.OrderID
}

var fieldIDToName_GetRechargeOrderDetailReq = map[int16]string{
	1: "order_id",
}

func (p *GetRechargeOrderDetailReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOrderID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrderID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOrderID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRechargeOrderDetailReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetRechargeOrderDetailReq[fieldId]))
}

func (p *GetRechargeOrderDetailReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderID = _field
	return nil
}

func (p *GetRechargeOrderDetailReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRechargeOrderDetailReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRechargeOrderDetailReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRechargeOrderDetailReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRechargeOrderDetailReq(%+v)", *p)

}

// 查询充值订单详情响应
type GetRechargeOrderDetailResp struct {
	Order    *RechargeOrder   `thrift:"order,1,optional" form:"order" json:"order,omitempty" query:"order"`
	BaseResp *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewGetRechargeOrderDetailResp() *GetRechargeOrderDetailResp {
	return &GetRechargeOrderDetailResp{}
}

func (p *GetRechargeOrderDetailResp) InitDefault() {
}

var GetRechargeOrderDetailResp_Order_DEFAULT *RechargeOrder

func (p *GetRechargeOrderDetailResp) GetOrder() (v *RechargeOrder) {
	if !p.IsSetOrder() {
		return GetRechargeOrderDetailResp_Order_DEFAULT
	}
	return p.Order
}

var GetRechargeOrderDetailResp_BaseResp_DEFAULT *common.BaseResp

func (p *GetRechargeOrderDetailResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetRechargeOrderDetailResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_GetRechargeOrderDetailResp = map[int16]string{
	1: "order",
	2: "base_resp",
}

func (p *GetRechargeOrderDetailResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *GetRechargeOrderDetailResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetRechargeOrderDetailResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRechargeOrderDetailResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetRechargeOrderDetailResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRechargeOrder()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Order = _field
	return nil
}
func (p *GetRechargeOrderDetailResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetRechargeOrderDetailResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRechargeOrderDetailResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRechargeOrderDetailResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Order.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRechargeOrderDetailResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetRechargeOrderDetailResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRechargeOrderDetailResp(%+v)", *p)

}

// admin确认充值订单请求
type ConfirmRechargeOrderReq struct {
	OrderID string `thrift:"order_id,1,required" form:"order_id,required" json:"order_id,required"`
	// 管理员可以填写或更新交易哈希
	CryptoTxHash *string `thrift:"crypto_tx_hash,2,optional" form:"crypto_tx_hash" json:"crypto_tx_hash,omitempty"`
	// 备注
	Remark *string `thrift:"remark,3,optional" form:"remark" json:"remark,omitempty"`
}

func NewConfirmRechargeOrderReq() *ConfirmRechargeOrderReq {
	return &ConfirmRechargeOrderReq{}
}

func (p *ConfirmRechargeOrderReq) InitDefault() {
}

func (p *ConfirmRechargeOrderReq) GetOrderID() (v string) {
	return p.OrderID
}

var ConfirmRechargeOrderReq_CryptoTxHash_DEFAULT string

func (p *ConfirmRechargeOrderReq) GetCryptoTxHash() (v string) {
	if !p.IsSetCryptoTxHash() {
		return ConfirmRechargeOrderReq_CryptoTxHash_DEFAULT
	}
	return *p.CryptoTxHash
}

var ConfirmRechargeOrderReq_Remark_DEFAULT string

func (p *ConfirmRechargeOrderReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return ConfirmRechargeOrderReq_Remark_DEFAULT
	}
	return *p.Remark
}

var fieldIDToName_ConfirmRechargeOrderReq = map[int16]string{
	1: "order_id",
	2: "crypto_tx_hash",
	3: "remark",
}

func (p *ConfirmRechargeOrderReq) IsSetCryptoTxHash() bool {
	return p.CryptoTxHash != nil
}

func (p *ConfirmRechargeOrderReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *ConfirmRechargeOrderReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOrderID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrderID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOrderID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ConfirmRechargeOrderReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ConfirmRechargeOrderReq[fieldId]))
}

func (p *ConfirmRechargeOrderReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderID = _field
	return nil
}
func (p *ConfirmRechargeOrderReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CryptoTxHash = _field
	return nil
}
func (p *ConfirmRechargeOrderReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}

func (p *ConfirmRechargeOrderReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmRechargeOrderReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ConfirmRechargeOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ConfirmRechargeOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCryptoTxHash() {
		if err = oprot.WriteFieldBegin("crypto_tx_hash", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CryptoTxHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ConfirmRechargeOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ConfirmRechargeOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmRechargeOrderReq(%+v)", *p)

}

// admin确认充值订单响应
type ConfirmRechargeOrderResp struct {
	Order    *RechargeOrder   `thrift:"order,1,optional" form:"order" json:"order,omitempty" query:"order"`
	BaseResp *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewConfirmRechargeOrderResp() *ConfirmRechargeOrderResp {
	return &ConfirmRechargeOrderResp{}
}

func (p *ConfirmRechargeOrderResp) InitDefault() {
}

var ConfirmRechargeOrderResp_Order_DEFAULT *RechargeOrder

func (p *ConfirmRechargeOrderResp) GetOrder() (v *RechargeOrder) {
	if !p.IsSetOrder() {
		return ConfirmRechargeOrderResp_Order_DEFAULT
	}
	return p.Order
}

var ConfirmRechargeOrderResp_BaseResp_DEFAULT *common.BaseResp

func (p *ConfirmRechargeOrderResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return ConfirmRechargeOrderResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_ConfirmRechargeOrderResp = map[int16]string{
	1: "order",
	2: "base_resp",
}

func (p *ConfirmRechargeOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *ConfirmRechargeOrderResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ConfirmRechargeOrderResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ConfirmRechargeOrderResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ConfirmRechargeOrderResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRechargeOrder()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Order = _field
	return nil
}
func (p *ConfirmRechargeOrderResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ConfirmRechargeOrderResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmRechargeOrderResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ConfirmRechargeOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Order.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ConfirmRechargeOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ConfirmRechargeOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmRechargeOrderResp(%+v)", *p)

}

// admin拒绝充值订单请求
type RejectRechargeOrderReq struct {
	OrderID string `thrift:"order_id,1,required" form:"order_id,required" json:"order_id,required"`
	// 失败原因
	FailedReason string `thrift:"failed_reason,2,required" form:"failed_reason,required" json:"failed_reason,required"`
}

func NewRejectRechargeOrderReq() *RejectRechargeOrderReq {
	return &RejectRechargeOrderReq{}
}

func (p *RejectRechargeOrderReq) InitDefault() {
}

func (p *RejectRechargeOrderReq) GetOrderID() (v string) {
	return p.OrderID
}

func (p *RejectRechargeOrderReq) GetFailedReason() (v string) {
	return p.FailedReason
}

var fieldIDToName_RejectRechargeOrderReq = map[int16]string{
	1: "order_id",
	2: "failed_reason",
}

func (p *RejectRechargeOrderReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOrderID bool = false
	var issetFailedReason bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrderID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailedReason = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOrderID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFailedReason {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RejectRechargeOrderReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RejectRechargeOrderReq[fieldId]))
}

func (p *RejectRechargeOrderReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderID = _field
	return nil
}
func (p *RejectRechargeOrderReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FailedReason = _field
	return nil
}

func (p *RejectRechargeOrderReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectRechargeOrderReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RejectRechargeOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RejectRechargeOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("failed_reason", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FailedReason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RejectRechargeOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectRechargeOrderReq(%+v)", *p)

}

// admin拒绝充值订单响应
type RejectRechargeOrderResp struct {
	Order    *RechargeOrder   `thrift:"order,1,optional" form:"order" json:"order,omitempty" query:"order"`
	BaseResp *common.BaseResp `thrift:"base_resp,2" form:"base_resp" json:"base_resp" query:"base_resp"`
}

func NewRejectRechargeOrderResp() *RejectRechargeOrderResp {
	return &RejectRechargeOrderResp{}
}

func (p *RejectRechargeOrderResp) InitDefault() {
}

var RejectRechargeOrderResp_Order_DEFAULT *RechargeOrder

func (p *RejectRechargeOrderResp) GetOrder() (v *RechargeOrder) {
	if !p.IsSetOrder() {
		return RejectRechargeOrderResp_Order_DEFAULT
	}
	return p.Order
}

var RejectRechargeOrderResp_BaseResp_DEFAULT *common.BaseResp

func (p *RejectRechargeOrderResp) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return RejectRechargeOrderResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var fieldIDToName_RejectRechargeOrderResp = map[int16]string{
	1: "order",
	2: "base_resp",
}

func (p *RejectRechargeOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *RejectRechargeOrderResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RejectRechargeOrderResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RejectRechargeOrderResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RejectRechargeOrderResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRechargeOrder()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Order = _field
	return nil
}
func (p *RejectRechargeOrderResp) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RejectRechargeOrderResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectRechargeOrderResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RejectRechargeOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Order.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RejectRechargeOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RejectRechargeOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectRechargeOrderResp(%+v)", *p)

}

// 充值订单服务
type RechargeOrderService interface {
	// normal用户创建充值订单
	CreateCryptoRechargeOrder(ctx context.Context, req *CreateCryptoRechargeOrderReq) (r *CreateRechargeOrderResp, err error)

	CreateOnlineRechargeOrder(ctx context.Context, req *CreateOnlineRechargeOrderReq) (r *CreateRechargeOrderResp, err error)
	// normal用户查询自己的充值订单
	GetMyRechargeOrders(ctx context.Context, req *GetMyRechargeOrdersReq) (r *GetRechargeOrdersResp, err error)

	GetRechargeOrderDetail(ctx context.Context, req *GetRechargeOrderDetailReq) (r *GetRechargeOrderDetailResp, err error)
	// admin查询所有充值订单
	GetAllRechargeOrders(ctx context.Context, req *GetAllRechargeOrdersReq) (r *GetRechargeOrdersResp, err error)
	// admin确认/拒绝充值订单
	ConfirmRechargeOrder(ctx context.Context, req *ConfirmRechargeOrderReq) (r *ConfirmRechargeOrderResp, err error)

	RejectRechargeOrder(ctx context.Context, req *RejectRechargeOrderReq) (r *RejectRechargeOrderResp, err error)
}

type RechargeOrderServiceClient struct {
	c thrift.TClient
}

func NewRechargeOrderServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RechargeOrderServiceClient {
	return &RechargeOrderServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRechargeOrderServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RechargeOrderServiceClient {
	return &RechargeOrderServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRechargeOrderServiceClient(c thrift.TClient) *RechargeOrderServiceClient {
	return &RechargeOrderServiceClient{
		c: c,
	}
}

func (p *RechargeOrderServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RechargeOrderServiceClient) CreateCryptoRechargeOrder(ctx context.Context, req *CreateCryptoRechargeOrderReq) (r *CreateRechargeOrderResp, err error) {
	var _args RechargeOrderServiceCreateCryptoRechargeOrderArgs
	_args.Req = req
	var _result RechargeOrderServiceCreateCryptoRechargeOrderResult
	if err = p.Client_().Call(ctx, "CreateCryptoRechargeOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) CreateOnlineRechargeOrder(ctx context.Context, req *CreateOnlineRechargeOrderReq) (r *CreateRechargeOrderResp, err error) {
	var _args RechargeOrderServiceCreateOnlineRechargeOrderArgs
	_args.Req = req
	var _result RechargeOrderServiceCreateOnlineRechargeOrderResult
	if err = p.Client_().Call(ctx, "CreateOnlineRechargeOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) GetMyRechargeOrders(ctx context.Context, req *GetMyRechargeOrdersReq) (r *GetRechargeOrdersResp, err error) {
	var _args RechargeOrderServiceGetMyRechargeOrdersArgs
	_args.Req = req
	var _result RechargeOrderServiceGetMyRechargeOrdersResult
	if err = p.Client_().Call(ctx, "GetMyRechargeOrders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) GetRechargeOrderDetail(ctx context.Context, req *GetRechargeOrderDetailReq) (r *GetRechargeOrderDetailResp, err error) {
	var _args RechargeOrderServiceGetRechargeOrderDetailArgs
	_args.Req = req
	var _result RechargeOrderServiceGetRechargeOrderDetailResult
	if err = p.Client_().Call(ctx, "GetRechargeOrderDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) GetAllRechargeOrders(ctx context.Context, req *GetAllRechargeOrdersReq) (r *GetRechargeOrdersResp, err error) {
	var _args RechargeOrderServiceGetAllRechargeOrdersArgs
	_args.Req = req
	var _result RechargeOrderServiceGetAllRechargeOrdersResult
	if err = p.Client_().Call(ctx, "GetAllRechargeOrders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) ConfirmRechargeOrder(ctx context.Context, req *ConfirmRechargeOrderReq) (r *ConfirmRechargeOrderResp, err error) {
	var _args RechargeOrderServiceConfirmRechargeOrderArgs
	_args.Req = req
	var _result RechargeOrderServiceConfirmRechargeOrderResult
	if err = p.Client_().Call(ctx, "ConfirmRechargeOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RechargeOrderServiceClient) RejectRechargeOrder(ctx context.Context, req *RejectRechargeOrderReq) (r *RejectRechargeOrderResp, err error) {
	var _args RechargeOrderServiceRejectRechargeOrderArgs
	_args.Req = req
	var _result RechargeOrderServiceRejectRechargeOrderResult
	if err = p.Client_().Call(ctx, "RejectRechargeOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type RechargeOrderServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RechargeOrderService
}

func (p *RechargeOrderServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RechargeOrderServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RechargeOrderServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRechargeOrderServiceProcessor(handler RechargeOrderService) *RechargeOrderServiceProcessor {
	self := &RechargeOrderServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCryptoRechargeOrder", &rechargeOrderServiceProcessorCreateCryptoRechargeOrder{handler: handler})
	self.AddToProcessorMap("CreateOnlineRechargeOrder", &rechargeOrderServiceProcessorCreateOnlineRechargeOrder{handler: handler})
	self.AddToProcessorMap("GetMyRechargeOrders", &rechargeOrderServiceProcessorGetMyRechargeOrders{handler: handler})
	self.AddToProcessorMap("GetRechargeOrderDetail", &rechargeOrderServiceProcessorGetRechargeOrderDetail{handler: handler})
	self.AddToProcessorMap("GetAllRechargeOrders", &rechargeOrderServiceProcessorGetAllRechargeOrders{handler: handler})
	self.AddToProcessorMap("ConfirmRechargeOrder", &rechargeOrderServiceProcessorConfirmRechargeOrder{handler: handler})
	self.AddToProcessorMap("RejectRechargeOrder", &rechargeOrderServiceProcessorRejectRechargeOrder{handler: handler})
	return self
}
func (p *RechargeOrderServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type rechargeOrderServiceProcessorCreateCryptoRechargeOrder struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorCreateCryptoRechargeOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceCreateCryptoRechargeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCryptoRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceCreateCryptoRechargeOrderResult{}
	var retval *CreateRechargeOrderResp
	if retval, err2 = p.handler.CreateCryptoRechargeOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCryptoRechargeOrder: "+err2.Error())
		oprot.WriteMessageBegin("CreateCryptoRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCryptoRechargeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorCreateOnlineRechargeOrder struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorCreateOnlineRechargeOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceCreateOnlineRechargeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateOnlineRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceCreateOnlineRechargeOrderResult{}
	var retval *CreateRechargeOrderResp
	if retval, err2 = p.handler.CreateOnlineRechargeOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateOnlineRechargeOrder: "+err2.Error())
		oprot.WriteMessageBegin("CreateOnlineRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateOnlineRechargeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorGetMyRechargeOrders struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorGetMyRechargeOrders) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceGetMyRechargeOrdersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMyRechargeOrders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceGetMyRechargeOrdersResult{}
	var retval *GetRechargeOrdersResp
	if retval, err2 = p.handler.GetMyRechargeOrders(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMyRechargeOrders: "+err2.Error())
		oprot.WriteMessageBegin("GetMyRechargeOrders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMyRechargeOrders", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorGetRechargeOrderDetail struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorGetRechargeOrderDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceGetRechargeOrderDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRechargeOrderDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceGetRechargeOrderDetailResult{}
	var retval *GetRechargeOrderDetailResp
	if retval, err2 = p.handler.GetRechargeOrderDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRechargeOrderDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetRechargeOrderDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRechargeOrderDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorGetAllRechargeOrders struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorGetAllRechargeOrders) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceGetAllRechargeOrdersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllRechargeOrders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceGetAllRechargeOrdersResult{}
	var retval *GetRechargeOrdersResp
	if retval, err2 = p.handler.GetAllRechargeOrders(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllRechargeOrders: "+err2.Error())
		oprot.WriteMessageBegin("GetAllRechargeOrders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllRechargeOrders", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorConfirmRechargeOrder struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorConfirmRechargeOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceConfirmRechargeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ConfirmRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceConfirmRechargeOrderResult{}
	var retval *ConfirmRechargeOrderResp
	if retval, err2 = p.handler.ConfirmRechargeOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ConfirmRechargeOrder: "+err2.Error())
		oprot.WriteMessageBegin("ConfirmRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ConfirmRechargeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type rechargeOrderServiceProcessorRejectRechargeOrder struct {
	handler RechargeOrderService
}

func (p *rechargeOrderServiceProcessorRejectRechargeOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeOrderServiceRejectRechargeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RejectRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RechargeOrderServiceRejectRechargeOrderResult{}
	var retval *RejectRechargeOrderResp
	if retval, err2 = p.handler.RejectRechargeOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RejectRechargeOrder: "+err2.Error())
		oprot.WriteMessageBegin("RejectRechargeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RejectRechargeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type RechargeOrderServiceCreateCryptoRechargeOrderArgs struct {
	Req *CreateCryptoRechargeOrderReq `thrift:"req,1"`
}

func NewRechargeOrderServiceCreateCryptoRechargeOrderArgs() *RechargeOrderServiceCreateCryptoRechargeOrderArgs {
	return &RechargeOrderServiceCreateCryptoRechargeOrderArgs{}
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) InitDefault() {
}

var RechargeOrderServiceCreateCryptoRechargeOrderArgs_Req_DEFAULT *CreateCryptoRechargeOrderReq

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) GetReq() (v *CreateCryptoRechargeOrderReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceCreateCryptoRechargeOrderArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceCreateCryptoRechargeOrderArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceCreateCryptoRechargeOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateCryptoRechargeOrderReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCryptoRechargeOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceCreateCryptoRechargeOrderArgs(%+v)", *p)

}

type RechargeOrderServiceCreateCryptoRechargeOrderResult struct {
	Success *CreateRechargeOrderResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceCreateCryptoRechargeOrderResult() *RechargeOrderServiceCreateCryptoRechargeOrderResult {
	return &RechargeOrderServiceCreateCryptoRechargeOrderResult{}
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) InitDefault() {
}

var RechargeOrderServiceCreateCryptoRechargeOrderResult_Success_DEFAULT *CreateRechargeOrderResp

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) GetSuccess() (v *CreateRechargeOrderResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceCreateCryptoRechargeOrderResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceCreateCryptoRechargeOrderResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceCreateCryptoRechargeOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateRechargeOrderResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCryptoRechargeOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceCreateCryptoRechargeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceCreateCryptoRechargeOrderResult(%+v)", *p)

}

type RechargeOrderServiceCreateOnlineRechargeOrderArgs struct {
	Req *CreateOnlineRechargeOrderReq `thrift:"req,1"`
}

func NewRechargeOrderServiceCreateOnlineRechargeOrderArgs() *RechargeOrderServiceCreateOnlineRechargeOrderArgs {
	return &RechargeOrderServiceCreateOnlineRechargeOrderArgs{}
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) InitDefault() {
}

var RechargeOrderServiceCreateOnlineRechargeOrderArgs_Req_DEFAULT *CreateOnlineRechargeOrderReq

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) GetReq() (v *CreateOnlineRechargeOrderReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceCreateOnlineRechargeOrderArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceCreateOnlineRechargeOrderArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceCreateOnlineRechargeOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOnlineRechargeOrderReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOnlineRechargeOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceCreateOnlineRechargeOrderArgs(%+v)", *p)

}

type RechargeOrderServiceCreateOnlineRechargeOrderResult struct {
	Success *CreateRechargeOrderResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceCreateOnlineRechargeOrderResult() *RechargeOrderServiceCreateOnlineRechargeOrderResult {
	return &RechargeOrderServiceCreateOnlineRechargeOrderResult{}
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) InitDefault() {
}

var RechargeOrderServiceCreateOnlineRechargeOrderResult_Success_DEFAULT *CreateRechargeOrderResp

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) GetSuccess() (v *CreateRechargeOrderResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceCreateOnlineRechargeOrderResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceCreateOnlineRechargeOrderResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceCreateOnlineRechargeOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateRechargeOrderResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOnlineRechargeOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceCreateOnlineRechargeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceCreateOnlineRechargeOrderResult(%+v)", *p)

}

type RechargeOrderServiceGetMyRechargeOrdersArgs struct {
	Req *GetMyRechargeOrdersReq `thrift:"req,1"`
}

func NewRechargeOrderServiceGetMyRechargeOrdersArgs() *RechargeOrderServiceGetMyRechargeOrdersArgs {
	return &RechargeOrderServiceGetMyRechargeOrdersArgs{}
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) InitDefault() {
}

var RechargeOrderServiceGetMyRechargeOrdersArgs_Req_DEFAULT *GetMyRechargeOrdersReq

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) GetReq() (v *GetMyRechargeOrdersReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceGetMyRechargeOrdersArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceGetMyRechargeOrdersArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetMyRechargeOrdersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetMyRechargeOrdersReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMyRechargeOrders_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetMyRechargeOrdersArgs(%+v)", *p)

}

type RechargeOrderServiceGetMyRechargeOrdersResult struct {
	Success *GetRechargeOrdersResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceGetMyRechargeOrdersResult() *RechargeOrderServiceGetMyRechargeOrdersResult {
	return &RechargeOrderServiceGetMyRechargeOrdersResult{}
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) InitDefault() {
}

var RechargeOrderServiceGetMyRechargeOrdersResult_Success_DEFAULT *GetRechargeOrdersResp

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) GetSuccess() (v *GetRechargeOrdersResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceGetMyRechargeOrdersResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceGetMyRechargeOrdersResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetMyRechargeOrdersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetRechargeOrdersResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMyRechargeOrders_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceGetMyRechargeOrdersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetMyRechargeOrdersResult(%+v)", *p)

}

type RechargeOrderServiceGetRechargeOrderDetailArgs struct {
	Req *GetRechargeOrderDetailReq `thrift:"req,1"`
}

func NewRechargeOrderServiceGetRechargeOrderDetailArgs() *RechargeOrderServiceGetRechargeOrderDetailArgs {
	return &RechargeOrderServiceGetRechargeOrderDetailArgs{}
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) InitDefault() {
}

var RechargeOrderServiceGetRechargeOrderDetailArgs_Req_DEFAULT *GetRechargeOrderDetailReq

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) GetReq() (v *GetRechargeOrderDetailReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceGetRechargeOrderDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceGetRechargeOrderDetailArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetRechargeOrderDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetRechargeOrderDetailReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRechargeOrderDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetRechargeOrderDetailArgs(%+v)", *p)

}

type RechargeOrderServiceGetRechargeOrderDetailResult struct {
	Success *GetRechargeOrderDetailResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceGetRechargeOrderDetailResult() *RechargeOrderServiceGetRechargeOrderDetailResult {
	return &RechargeOrderServiceGetRechargeOrderDetailResult{}
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) InitDefault() {
}

var RechargeOrderServiceGetRechargeOrderDetailResult_Success_DEFAULT *GetRechargeOrderDetailResp

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) GetSuccess() (v *GetRechargeOrderDetailResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceGetRechargeOrderDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceGetRechargeOrderDetailResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetRechargeOrderDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetRechargeOrderDetailResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRechargeOrderDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceGetRechargeOrderDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetRechargeOrderDetailResult(%+v)", *p)

}

type RechargeOrderServiceGetAllRechargeOrdersArgs struct {
	Req *GetAllRechargeOrdersReq `thrift:"req,1"`
}

func NewRechargeOrderServiceGetAllRechargeOrdersArgs() *RechargeOrderServiceGetAllRechargeOrdersArgs {
	return &RechargeOrderServiceGetAllRechargeOrdersArgs{}
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) InitDefault() {
}

var RechargeOrderServiceGetAllRechargeOrdersArgs_Req_DEFAULT *GetAllRechargeOrdersReq

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) GetReq() (v *GetAllRechargeOrdersReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceGetAllRechargeOrdersArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceGetAllRechargeOrdersArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetAllRechargeOrdersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetAllRechargeOrdersReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllRechargeOrders_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetAllRechargeOrdersArgs(%+v)", *p)

}

type RechargeOrderServiceGetAllRechargeOrdersResult struct {
	Success *GetRechargeOrdersResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceGetAllRechargeOrdersResult() *RechargeOrderServiceGetAllRechargeOrdersResult {
	return &RechargeOrderServiceGetAllRechargeOrdersResult{}
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) InitDefault() {
}

var RechargeOrderServiceGetAllRechargeOrdersResult_Success_DEFAULT *GetRechargeOrdersResp

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) GetSuccess() (v *GetRechargeOrdersResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceGetAllRechargeOrdersResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceGetAllRechargeOrdersResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceGetAllRechargeOrdersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetRechargeOrdersResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllRechargeOrders_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceGetAllRechargeOrdersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceGetAllRechargeOrdersResult(%+v)", *p)

}

type RechargeOrderServiceConfirmRechargeOrderArgs struct {
	Req *ConfirmRechargeOrderReq `thrift:"req,1"`
}

func NewRechargeOrderServiceConfirmRechargeOrderArgs() *RechargeOrderServiceConfirmRechargeOrderArgs {
	return &RechargeOrderServiceConfirmRechargeOrderArgs{}
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) InitDefault() {
}

var RechargeOrderServiceConfirmRechargeOrderArgs_Req_DEFAULT *ConfirmRechargeOrderReq

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) GetReq() (v *ConfirmRechargeOrderReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceConfirmRechargeOrderArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceConfirmRechargeOrderArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceConfirmRechargeOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewConfirmRechargeOrderReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmRechargeOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceConfirmRechargeOrderArgs(%+v)", *p)

}

type RechargeOrderServiceConfirmRechargeOrderResult struct {
	Success *ConfirmRechargeOrderResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceConfirmRechargeOrderResult() *RechargeOrderServiceConfirmRechargeOrderResult {
	return &RechargeOrderServiceConfirmRechargeOrderResult{}
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) InitDefault() {
}

var RechargeOrderServiceConfirmRechargeOrderResult_Success_DEFAULT *ConfirmRechargeOrderResp

func (p *RechargeOrderServiceConfirmRechargeOrderResult) GetSuccess() (v *ConfirmRechargeOrderResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceConfirmRechargeOrderResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceConfirmRechargeOrderResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceConfirmRechargeOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewConfirmRechargeOrderResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ConfirmRechargeOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceConfirmRechargeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceConfirmRechargeOrderResult(%+v)", *p)

}

type RechargeOrderServiceRejectRechargeOrderArgs struct {
	Req *RejectRechargeOrderReq `thrift:"req,1"`
}

func NewRechargeOrderServiceRejectRechargeOrderArgs() *RechargeOrderServiceRejectRechargeOrderArgs {
	return &RechargeOrderServiceRejectRechargeOrderArgs{}
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) InitDefault() {
}

var RechargeOrderServiceRejectRechargeOrderArgs_Req_DEFAULT *RejectRechargeOrderReq

func (p *RechargeOrderServiceRejectRechargeOrderArgs) GetReq() (v *RejectRechargeOrderReq) {
	if !p.IsSetReq() {
		return RechargeOrderServiceRejectRechargeOrderArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_RechargeOrderServiceRejectRechargeOrderArgs = map[int16]string{
	1: "req",
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceRejectRechargeOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRejectRechargeOrderReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectRechargeOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceRejectRechargeOrderArgs(%+v)", *p)

}

type RechargeOrderServiceRejectRechargeOrderResult struct {
	Success *RejectRechargeOrderResp `thrift:"success,0,optional"`
}

func NewRechargeOrderServiceRejectRechargeOrderResult() *RechargeOrderServiceRejectRechargeOrderResult {
	return &RechargeOrderServiceRejectRechargeOrderResult{}
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) InitDefault() {
}

var RechargeOrderServiceRejectRechargeOrderResult_Success_DEFAULT *RejectRechargeOrderResp

func (p *RechargeOrderServiceRejectRechargeOrderResult) GetSuccess() (v *RejectRechargeOrderResp) {
	if !p.IsSetSuccess() {
		return RechargeOrderServiceRejectRechargeOrderResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_RechargeOrderServiceRejectRechargeOrderResult = map[int16]string{
	0: "success",
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RechargeOrderServiceRejectRechargeOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRejectRechargeOrderResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectRechargeOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RechargeOrderServiceRejectRechargeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeOrderServiceRejectRechargeOrderResult(%+v)", *p)

}
