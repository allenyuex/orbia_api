// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"orbia_api/biz/dal/mysql"
	"orbia_api/biz/handler/auth"
	"orbia_api/biz/handler/user"
	"orbia_api/biz/infra/config"
	"orbia_api/biz/mw"
)

func main() {
	log.Println("🚀 Starting Orbia API Server...")

	// 1. 加载配置
	configPath := os.Getenv("CONFIG_PATH")
	if configPath == "" {
		configPath = "./conf/config.yaml"
	}
	if err := config.LoadConfig(configPath); err != nil {
		log.Fatalf("❌ Failed to load config: %v", err)
	}
	log.Println("✅ Config loaded successfully")

	// 2. 初始化数据库
	if err := mysql.Init(); err != nil {
		log.Fatalf("❌ Failed to initialize MySQL: %v", err)
	}
	defer mysql.Close()

	// 3. 初始化服务
	auth.InitAuthService()
	user.InitUserService()
	log.Println("✅ Services initialized successfully")

	// 4. 创建 Hertz 服务器
	addr := fmt.Sprintf("%s:%d",
		config.GlobalConfig.Server.Host,
		config.GlobalConfig.Server.Port,
	)
	h := server.Default(
		server.WithHostPorts(addr),
	)

	// 5. 注册全局中间件
	h.Use(mw.Recovery()) // 恢复中间件，必须放在最前面
	h.Use(mw.CORS())     // 跨域中间件
	h.Use(mw.Logger())   // 日志中间件

	// 6. 健康检查
	h.GET("/health", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"status":  "ok",
			"message": "Orbia API is running",
		})
	})

	// 7. 欢迎页面
	h.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"message": "Welcome to Orbia API",
			"version": "1.0.0",
			"docs":    "/api/v1/auth/wallet-login",
		})
	})

	// 8. 注册业务路由（由 hz 生成）
	register(h)

	// 9. 打印启动信息
	log.Printf("✨ Server is running on http://%s", addr)
	log.Println("📚 API Endpoints:")
	log.Println("   GET  /                              - Welcome message")
	log.Println("   GET  /health                        - Health check")
	log.Println("   POST /api/v1/auth/wallet-login      - Wallet login")
	log.Println("   POST /api/v1/auth/email-login       - Email login")
	log.Println("   POST /api/v1/user/profile           - Get user profile (requires JWT)")
	log.Println("   POST /api/v1/user/update-profile    - Update user profile (requires JWT)")
	log.Println("   POST /api/v1/user/:user_id          - Get user by ID")
	log.Println("")
	log.Println("💡 Test commands:")
	log.Printf("   curl http://localhost:%d/health\n", config.GlobalConfig.Server.Port)
	log.Printf("   curl -X POST http://localhost:%d/api/v1/auth/wallet-login -H \"Content-Type: application/json\" -d '{\"wallet_address\":\"0x...\",\"signature\":\"0x...\"}'\n", config.GlobalConfig.Server.Port)
	log.Println("")

	// 10. 优雅关闭
	go handleShutdown()

	// 11. 启动服务器
	h.Spin()
}

func handleShutdown() {
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
	<-sigCh
	log.Println("\n🛑 Shutting down server...")
	mysql.Close()
	os.Exit(0)
}
